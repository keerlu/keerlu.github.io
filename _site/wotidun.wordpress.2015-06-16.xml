<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2015-06-16 10:07"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Wot I Dun</title>
<link>https://wotidun.wordpress.com</link>
<description>I dun this</description>
<pubDate>Tue, 16 Jun 2015 10:07:53 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://wotidun.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>wotidun</wp:author_login>
  <wp:author_email>wotidunread@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[wotidun]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>463744</wp:term_id>
  <wp:tag_slug>angular</wp:tag_slug>
  <wp:tag_name><![CDATA[Angular]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>130330</wp:term_id>
  <wp:tag_slug>bananas</wp:tag_slug>
  <wp:tag_name><![CDATA[BANANAS!!!]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>114042</wp:term_id>
  <wp:tag_slug>bootstrap</wp:tag_slug>
  <wp:tag_name><![CDATA[Bootstrap]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>169</wp:term_id>
  <wp:tag_slug>css</wp:tag_slug>
  <wp:tag_name><![CDATA[CSS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27274</wp:term_id>
  <wp:tag_slug>d3</wp:tag_slug>
  <wp:tag_name><![CDATA[d3]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>59372229</wp:term_id>
  <wp:tag_slug>d3-js</wp:tag_slug>
  <wp:tag_name><![CDATA[d3.js]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>129632</wp:term_id>
  <wp:tag_slug>data-visualisation</wp:tag_slug>
  <wp:tag_name><![CDATA[data visualisation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>188743526</wp:term_id>
  <wp:tag_slug>dun-red</wp:tag_slug>
  <wp:tag_name><![CDATA[dun red]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>51334</wp:term_id>
  <wp:tag_slug>google-maps</wp:tag_slug>
  <wp:tag_name><![CDATA[Google Maps]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>457</wp:term_id>
  <wp:tag_slug>javascript</wp:tag_slug>
  <wp:tag_name><![CDATA[JavaScript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40477</wp:term_id>
  <wp:tag_slug>map</wp:tag_slug>
  <wp:tag_name><![CDATA[map]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8428230</wp:term_id>
  <wp:tag_slug>map-projection</wp:tag_slug>
  <wp:tag_name><![CDATA[map projection]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>273040341</wp:term_id>
  <wp:tag_slug>physics-visualisation</wp:tag_slug>
  <wp:tag_name><![CDATA[physics visualisation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1077399</wp:term_id>
  <wp:tag_slug>pygame</wp:tag_slug>
  <wp:tag_name><![CDATA[Pygame]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>832</wp:term_id>
  <wp:tag_slug>python</wp:tag_slug>
  <wp:tag_name><![CDATA[Python]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7597268</wp:term_id>
  <wp:tag_slug>standing-wave</wp:tag_slug>
  <wp:tag_name><![CDATA[standing wave]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>101319137</wp:term_id>
  <wp:tag_slug>zyring</wp:tag_slug>
  <wp:tag_name><![CDATA[Zyring]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title> &#187; Wot I Dun</title>
		<link>https://wotidun.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>https://wotidun.wordpress.com/about/</link>
  <pubDate>Fri, 20 Jun 2014 07:57:09 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[I dun these.

wotidunread [at] gmail [dot] com]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2014-06-20 07:57:09</wp:post_date>
  <wp:post_date_gmt>2014-06-20 07:57:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Wot I dun: Map projections project</title>
  <link>https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/</link>
  <pubDate>Wed, 16 Jul 2014 13:38:09 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.wordpress.com/?p=30</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Wot I made:</h2>

A Mercator projection map where you can click to change the centre of projection. Screenshot below:

<a href="https://wotidun.files.wordpress.com/2014/07/screenshot.png"><img class="alignnone  wp-image-71" src="http://wotidun.files.wordpress.com/2014/07/screenshot.png?w=300" alt="screenshot" width="669" height="352" /></a>

The map is currently centred on northern Greenland, and I'm moving the cursor to recentre it on Madagascar. A live, working version is also available <a href="http://bl.ocks.org/lucykeer/d9128e307c426613c834">here</a>. I'm pretty happy with it: some time I might try and extend it to make a scrollable version that reprojects as you go, but the current version is more or less what I wanted.

The final code is pretty short. But learning how to do it took AGES... mostly going round in circles figuring out <em>what</em> to do in the first place.

This project started with some idle scrolling around a very zoomed-out Google Maps view. I was looking at something or other in Northern Canada and obviously the map projection was pretty stupidly distorted at that latitude. It occurred to me that projections wouldn't be so bad if you could recentre them on whatever you were interested in as you went along. So I decided to investigate a bit further...

I quickly found Bernhard Jenny's paper on Adaptive Composite Map Projections (<a href="http://cartography.oregonstate.edu/publications.html">available here</a>), with the Cartography and Geovisualization Group at Oregon State University. Exactly the kind of thing I was looking for!

I wasn't aiming for anything nearly this fancy, but I thought it was a nice idea to play around with and learn some new things. I only later discovered that his scrollable map was <a href="http://cartography.oregonstate.edu/demos/AdaptiveCompositeMapProjections/">also available online</a> along with the source code on Github. Probably a good thing, as this way I just made things up as I went along, and learnt more.

There was a lot to learn. My programming background is pretty limited: I did some very numerics-based stuff in C and Mathematica during my Ph.D., but not a lot else. Since I finished I've spent some time playing around learning basic bits and pieces of Python, JavaScript, HTML and CSS, largely from <a href="codeacademy.com">Codeacademy tutorials</a> and the physics-y Python tutorials on <a href="http://www.petercollingridge.co.uk/projects">this website</a>. I thought it was time to have my own project that would put some things together. I rarely spent a whole day at a time on it, just worked on it in dribs and drabs between other stuff.

On the way I learned a lot of new things:

<ul>
<li>practice with JavaScript, Python and the plotting program Pyxplot</li>
<li>use of the JSON file format</li>
<li>a tiny bit of jQuery and use of the Flot plotting library for JavaScript</li>
<li>use of the d3 data visualisation library for JavaScript</li>
<li>use of Markdown to write this blog entry</li>
</ul>

The list of contents below gives an idea of the kind of scenic route I took to get the final map. At least I got there in the end...

<hr />

<h2>Contents:</h2>

<ul>
<li><a href="#19June">Thursday 19th June:</a> Found some data: downloaded Natural Earth shapefiles and converted to GeoJSON with ogr2ogr.</li>
<li><a href="#20June">Friday 20th June:</a> Tried to understand the JSON format and use JavaScript to extract data values. Also found data in a simple column format and plotted with Pyxplot, a plotting program I already know how to use.</li>
<li><a href="#25June">Wednesday 25th June:</a> Basic file input in Python, for reading in data files.</li>
<li><a href="#30June">Monday 30th June:</a> Maths time! Got out a pen and paper and worked out how to transform the coordinates.</li>
<li><a href="#1July">Tuesday 1st July:</a> Put the maths into Pyxplot and produced a plot centred on Antarctica. Then started to learn a bit about Flot, a JavaScript plotting library, and made a scatter plot.</li>
<li><a href="#2July">Wednesday 2nd July:</a> Used Python to get the column data into a Flot-readable JSON format.</li>
<li><a href="#3July">Thursday 3rd July:</a> Writing-up day. Used Dillinger online editor to get practice writing in Markdown.</li>
<li><a href="#7July">Monday 7th July:</a> Got a working (but very, very slow) map plotted in Flot.</li>
<li><a href="#8July">Tuesday 8th July:</a> Abrupt change of direction. Ditched Flot and started learning the JavaScript data visualisation library d3. Learned how to use a local server and followed a map tutorial.</li>
<li><a href="#9July">Wednesday 9th July:</a> Worked through another d3 map tutorial and made an abortive attempt at adding a 'click to centre' feature.</li>
<li><a href="#10July">Thursday 10th July and Friday 11th July:</a> Time to learn the d3 syntax properly. Worked through a lot of tutorials on bar charts, scatter plots, axes and transitions.</li>
<li><a href="#15July">Tuesday 15th July:</a> Success! Used new understanding of d3 to produce a map that worked. Also added a cursor and some other bits.</li>
</ul>

<!--more-->

<a id="19June"></a>

<hr />

<h2>Thursday 19th June</h2>

The first task was to get the data. Well, really the first task was working out what data I actually wanted. My first thought was to just find a big list of longitudes and latitudes of points on country boundaries which I could then transform.

This was more complicated than I expected (kind of a theme with the project). After googling around I found <a href="http://www.naturalearthdata.com/">Natural Earth</a>, which provides vast amounts of relevant data, but in a complicated <a href="http://en.wikipedia.org/wiki/Shapefile">shapefile</a> format I knew nothing about. I then learned how to convert this to a GeoJSON file, another format I knew nothing about. On the plus side, it was human-readable and JSON is apparently widely used, so looked like it was worth the effort to learn to use.

I did this with <a href="http://www.gdal.org/ogr2ogr.html">ogr2ogr</a> with help from some question like <a href="http://stackoverflow.com/questions/2223979/convert-a-shapefile-shp-to-xml-json">this</a> (can't find the exact one any more).

Finally, success of a kind! I got an enormous file I didn't understand, which I called <code>mapdata.json</code>.

<a id="20June"></a>

<hr />

<h2>Friday 20th June</h2>

I started off by trying to understand the JSON format, using the minimal example I found <a href="http://stackoverflow.com/questions/10926965/extracting-data-from-json-object-in-jquery-or-js">here</a> to learn how to extract some data out of one.

I knew no Javascript other than what I learned in a few Codeacademy tutorials, so this was kind of slow. I did't even know how to run Javascript in the browser, so first I used this <a href="http://www.w3schools.com/js/tryit.asp?filename=tryjs_myfirst">tutorial editor</a> and stuck in the minimal example.

OK, that worked. Getting somewhere!

Next up, I made an extremely cut-down version of the massive <code>mapdata.json</code> file, which I called <code>mapdata_cut.json</code>. It just had the details and coordinates for Aruba, a nice small blob on the map.

After some trial and error, I made an html page with a script that gets the first set of coordinates out (<code>mapcoords_1.html</code>).

[code lang=html]
&lt;h1&gt;Get map coordinates from file&lt;/h1&gt;
First set of coordinates for Aruba:

&lt;script&gt;// &lt;![CDATA[
var obj = [{
&quot;type&quot;: &quot;FeatureCollection&quot;,
&quot;features&quot;: [
{ &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;scalerank&quot;: 3, &quot;featurecla&quot;: &quot;Admin-0 country&quot;, &quot;LABELRANK&quot;: 5.000000, &quot;SOVEREIGNT&quot;: &quot;Netherlands&quot;, &quot;SOV_A3&quot;: &quot;NL1&quot;, &quot;ADM0_DIF&quot;: 1.000000, &quot;LEVEL&quot;: 2.000000, &quot;TYPE&quot;: &quot;Country&quot;, &quot;ADMIN&quot;: &quot;Aruba&quot;, &quot;ADM0_A3&quot;: &quot;ABW&quot;, &quot;GEOU_DIF&quot;: 0.000000, &quot;GEOUNIT&quot;: &quot;Aruba&quot;, &quot;GU_A3&quot;: &quot;ABW&quot;, &quot;SU_DIF&quot;: 0.000000, &quot;SUBUNIT&quot;: &quot;Aruba&quot;, &quot;SU_A3&quot;: &quot;ABW&quot;, &quot;BRK_DIFF&quot;: 0.000000, &quot;NAME&quot;: &quot;Aruba&quot;, &quot;NAME_LONG&quot;: &quot;Aruba&quot;, &quot;BRK_A3&quot;: &quot;ABW&quot;, &quot;BRK_NAME&quot;: &quot;Aruba&quot;, &quot;BRK_GROUP&quot;: &quot;&quot;, &quot;ABBREV&quot;: &quot;Aruba&quot;, &quot;POSTAL&quot;: &quot;AW&quot;, &quot;FORMAL_EN&quot;: &quot;Aruba&quot;, &quot;FORMAL_FR&quot;: &quot;&quot;, &quot;NOTE_ADM0&quot;: &quot;Neth.&quot;, &quot;NOTE_BRK&quot;: &quot;&quot;, &quot;NAME_SORT&quot;: &quot;Aruba&quot;, &quot;NAME_ALT&quot;: &quot;&quot;, &quot;MAPCOLOR7&quot;: 4.000000, &quot;MAPCOLOR8&quot;: 2.000000, &quot;MAPCOLOR9&quot;: 2.000000, &quot;MAPCOLOR13&quot;: 9.000000, &quot;POP_EST&quot;: 103065.000000, &quot;GDP_MD_EST&quot;: 2258.000000, &quot;POP_YEAR&quot;: -99.000000, &quot;LASTCENSUS&quot;: 2010.000000, &quot;GDP_YEAR&quot;: -99.000000, &quot;ECONOMY&quot;: &quot;6. Developing region&quot;, &quot;INCOME_GRP&quot;: &quot;2. High income: nonOECD&quot;, &quot;WIKIPEDIA&quot;: -99.000000, &quot;FIPS_10_&quot;: &quot;AA&quot;, &quot;ISO_A2&quot;: &quot;AW&quot;, &quot;ISO_A3&quot;: &quot;ABW&quot;, &quot;ISO_N3&quot;: &quot;533&quot;, &quot;UN_A3&quot;: &quot;533&quot;, &quot;WB_A2&quot;: &quot;AW&quot;, &quot;WB_A3&quot;: &quot;ABW&quot;, &quot;WOE_ID&quot;: 23424736.000000, &quot;WOE_ID_EH&quot;: 23424736.000000, &quot;WOE_NOTE&quot;: &quot;Exact WOE match as country&quot;, &quot;ADM0_A3_IS&quot;: &quot;ABW&quot;, &quot;ADM0_A3_US&quot;: &quot;ABW&quot;, &quot;ADM0_A3_UN&quot;: -99.000000, &quot;ADM0_A3_WB&quot;: -99.000000, &quot;CONTINENT&quot;: &quot;North America&quot;, &quot;REGION_UN&quot;: &quot;Americas&quot;, &quot;SUBREGION&quot;: &quot;Caribbean&quot;, &quot;REGION_WB&quot;: &quot;Latin America &amp; Caribbean&quot;, &quot;NAME_LEN&quot;: 5.000000, &quot;LONG_LEN&quot;: 5.000000, &quot;ABBREV_LEN&quot;: 5.000000, &quot;TINY&quot;: 4.000000, &quot;HOMEPART&quot;: -99.000000 }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ -69.996938, 12.577582 ], [ -69.936391, 12.531724 ], [ -69.924672, 12.519232 ], [ -69.915761, 12.497016 ], [ -69.880198, 12.453559 ], [ -69.876820, 12.427395 ], [ -69.888092, 12.417670 ], [ -69.908803, 12.417792 ], [ -69.930531, 12.425971 ], [ -69.945139, 12.440375 ], [ -69.924672, 12.440375 ], [ -69.924672, 12.447211 ], [ -69.958567, 12.463202 ], [ -70.027659, 12.522935 ], [ -70.048085, 12.531155 ], [ -70.058095, 12.537177 ], [ -70.062408, 12.546820 ], [ -70.060374, 12.556952 ], [ -70.051096, 12.574042 ], [ -70.048736, 12.583726 ], [ -70.052642, 12.600002 ], [ -70.059641, 12.614244 ], [ -70.061106, 12.625393 ], [ -70.048736, 12.632148 ], [ -70.007151, 12.585517 ], [ -69.996938, 12.577582 ] ] ] } }
]
}];

document.getElementById(&quot;demo&quot;).innerHTML = obj[0].features[0].geometry.coordinates[0][0];
// ]]&gt;&lt;/script&gt;

&nbsp;

[/code]

That was enough fun for one morning. Later, I finally found data in the simple column format I was originally looking for, from the US <a href="http://www.ngdc.noaa.gov/mgg/coast/">National Geophysical Data Center</a>. Saved it as <code>worldmap.dat</code>.

I plotted it with my favourite plotting program, <a href="http://pyxplot.org.uk/">Pyxplot</a> (similar to gnuplot but much prettier defaults and extra features). My very basic plot file (`worldmap_basic.ppl') was

[code lang=text]
set terminal png
set output &#039;worldmap_basic.png&#039;

set nokey
plot &#039;worldmap.dat&#039; every ::1 with lines
[/code]

which produced the output

<a href="https://wotidun.files.wordpress.com/2014/07/worldmap_basic.png"><img class="alignnone size-medium wp-image-40" src="http://wotidun.files.wordpress.com/2014/07/worldmap_basic.png?w=300" alt="worldmap_basic" width="300" height="186" /></a>

Excellent, I now have a world map! I may want to try changing to the Mercator projection (or something else) later, but actually just plotting latitude vs. longitude isn't bad. I discovered that this simple projection is called the <a href="http://en.wikipedia.org/wiki/Equirectangular_projection">equirectangular projection</a>

Talking of Gnuplot, I then realised I could have just got the data from their <a href="http://www.gnuplotting.org/plotting-the-world/">demo files</a>. Well, why make things simple for myself... anyway, the JSON stuff will hopefully come in handy later.

<a id="25June"></a>

<hr />

<h2>Wednesday 25th June</h2>

Back to it after a couple of days off the project, which involved a lot of reinstalling my broken old version of Ubuntu and then scavenging free programs from my university before my password ran out. Interesting fact: if you forget to type 'sudo', Mathematica only tells you this twenty minutes into the installation process, and you have to start again.

This time I was learning something about file input and output in Python (I'm writing up these notes a week later and I no longer remember why that was my priority). I used <a href="http://en.wikibooks.org/wiki/Python_Programming/Input_and_Output">this tutorial</a> and started out with

[code lang=python]
for line in open(&#039;worldmap.dat&#039;, &#039;r&#039;):
print line[0]
[/code]

The first thing I learned was not to read in the first character from each file if you have a very long file. I made a cutdown version called <code>shortmap.dat</code>.

Next up was printing all the data:

[code lang=python]
for line in open(&#039;shortmap.dat&#039;, &#039;r&#039;):
for i in range(0,len(line)):
print line[i]
[/code]

This script is highly useful for anyone who wants their data spat out one character per line. Finally I tried,

[code lang=python]
for line in open(&#039;shortmap.dat&#039;, &#039;r&#039;):
for i in range(0,len(line)):
print line[i]
[/code]

That was enough for my first foray into the exciting world of Python input and output.

<a id="30June"></a>

<hr />

<h2>Monday 30th June</h2>

This week I was back on I was hoping would be familiar ground, doing the maths to transform the coordinates. The idea being, recenter the map so that instead of latitude 0, longitude 0 being in the middle, you pick some arbitrary point as the centre.

My brain was not really cooperating though.

First I naively thought that just adding on to both coordinates and replotting would do the trick. So as a first test I tried adding 200 to the longitude (first column of the data file) and 100 to the latitude.

I did have enough wits make sure I still plotted the same coordinate range: -180 to 180 for longitude, -90 to 90 for latitude. So I included some modulo symbols and typed

[code lang=text]
plot &#039;worldmap.dat&#039; using (($1+200)%360 - 180):(($2+100)%180 - 90) every ::1 with lines
[/code]

and got a big mess (<code>bigmess.png</code>):

<a href="https://wotidun.files.wordpress.com/2014/07/bigmess.png"><img class="alignnone size-medium wp-image-42" src="http://wotidun.files.wordpress.com/2014/07/bigmess.png?w=300" alt="bigmess" width="300" height="186" /></a>

The coordinate range was right but not much else. Once I'd experimented a bit and figured out what was going on I realised there were two major problems:

<ol>
<li>The vertical and horizontal lines. These occur if a continent gets chopped in half at the boundaries of the map, and Pyxplot tries to join its coordinates together. I couldn't be bothered to think about that one so just replotted with points instead:</li>
</ol>

[code lang=text]
plot &#039;worldmap.dat&#039; ... with points pt 1 ps 0.02
[/code]

<ol>
<li>More fundamentally, the map is completely borked. Transforming the longitude works as intended - you can easily move the map so that the Pacific is in the middle. However transforming the latitude is not so simple. Moving Antarctica higher up the map will not magically make it the right shape!</li>
</ol>

This should have been obvious but somehow wasn't. So I had to think a bit harder, with a bit of help from <a href="http://math.stackexchange.com/questions/92301/transforming-from-one-spherical-coordinate-system-to-another">this Stack Exchange question</a>.

Time for pen and paper.

<blockquote>
  Call the latitude $latex \theta &amp;s=1$ and the longitude $latex \phi &amp;s=1$. Then in Cartesians we have:
  
  $latex x = \cos\theta \cos\phi , &amp;s=2$
  $latex y = \cos\theta \sin\phi , &amp;s=2$
  $latex z = \sin\theta . &amp;s=2$
  
  Note the difference to usual spherical coordinates as we are using latitude not colatitude. Now I want to rotate the sphere by some fixed angles $latex \theta' &amp;s=1$ and $latex \phi' &amp;s=1$. The $latex \phi' &amp;s=1$ (longitude) coordinate just shifts the centre of the map so I can add it on at the end - it's only the $latex \theta' &amp;s=1$ (latitude) coordinate that needs to be treated specially, so I'll take $latex \phi' = 0 &amp;s=1$ for now. I'll rotate by $latex \theta' &amp;s=1$ in the $latex x &amp;s=1$-$latex z &amp;s=1$ plane, giving new Cartesian coordinates $latex (x_1, y_1, z_1) &amp;s=1$ defined by
  
  $latex x_1 = \cos\theta' x + \sin\theta' z , &amp;s=2$
  $latex y_1 = y , &amp;s=2$
  $latex z_2 = -\sin\theta' x + \cos \theta' z . &amp;s=2$
  
  Inverting, we have that
  
  $latex \theta' = \arcsin\left(z_1\right) , &amp;s=2$
  $latex \phi' = \arcsin\left(\frac{y_1}{x_1}\right) . &amp;s=2$
  
  I could then do a bunch of substitutions to rewrite $latex (\theta', \phi') &amp;s=1$ in terms of $latex (\theta, \phi) &amp;s=1$, and it would probably simplify a bit... but what's the point, if the computer will be doing it for me anyway?
</blockquote>

That gave me something to stick into Pyxplot... but that required a bit more reading up so I left it for another day. Looking ahead, I also found <a href="http://www.flotcharts.org/flot/examples/">Flot</a>, a plotting library for JavaScript. Could be worth playing with.

<a id="1July"></a>

<hr />

<h2>Tuesday 1st July</h2>

I'd only really used Pyxplot before to plot existing data, not transform it first. So first I needed to learn about <a href="http://pyxplot.org.uk/current/doc/html/sect0022.html">doing numerical calculations with Pyxplot.</a>

It was actually pretty intuitive, except for using degrees instead of radians which was a bit of a faff. Once I'd got it figured out, my final plot file (<code>worldmap_recentre</code>) was

[code lang=text]
set terminal png

set output &#039;worldmap_recentre.png&#039;
set nokey

set unit of angle deg
set unit angle nodimensionless

set xlabel &quot;$phi$&quot;
set ylabel &quot;$theta$&quot;

# Translate to Cartesians:

x(theta, phi) = cos(theta)*cos(phi)
y(theta,phi) = cos(theta)*sin(phi)
z(theta,phi) = sin(theta)

# Pick the new latitude thetadash and longitude phidash you want the map centred on

thetadash = -90*unit(deg)
phidash = 90*unit(deg)

# Rotate the Cartesian coordinates by thetadash to get new set (x1, y1, z1)
# (the phidash rotation can be added at the end)

x1(theta,phi) = cos(thetadash)*x(theta,phi) + sin(thetadash)*z(theta,phi)
y1(theta,phi) = y(theta,phi)
z1(theta,phi) = -sin(thetadash)*x(theta,phi) + cos(thetadash)*z(theta,phi)

# Invert to get the new coordinate axes (theta1, phi1)
# - also need to add on phidash to phi1

theta1(theta,phi) = asin(z1(theta,phi))
phi1(theta,phi) = (atan2(x1(theta,phi), y1(theta,phi)) + phidash)%(360*unit(deg)) - 180*unit(deg)

plot &#039;worldmap.dat&#039; using (phi1($2*unit(deg),$1*unit(deg))):(theta1($2*unit(deg),$1*unit(deg))) every ::1 with points pt 1 ps 0.02
[/code]

This produces a nice map of the world centred on Antarctica:

<a href="https://wotidun.files.wordpress.com/2014/07/worldmap_recentre.png"><img class="alignnone size-medium wp-image-54" src="http://wotidun.files.wordpress.com/2014/07/worldmap_recentre.png?w=300" alt="worldmap_recentre" width="300" height="196" /></a>

On the way I produced this rather pretty but not very helpful version (<code>prettymess.png</code>):

<a href="https://wotidun.files.wordpress.com/2014/07/prettymess.png"><img class="alignnone size-medium wp-image-43" src="http://wotidun.files.wordpress.com/2014/07/prettymess.png?w=300" alt="prettymess" width="300" height="196" /></a>

That was from using the wrong inverse tangent function, <code>atan</code> rather than <code>atan2</code>.

I then played around with Flot for a bit, using some nice tutorials on <a href="http://www.pikemere.co.uk/blog/flot-how-to-create-charts/">getting started</a>, <a href="http://www.pikemere.co.uk/blog/flot-how-to-create-line-graphs/">making line graphs</a> and what I was really interested in, <a href="http://www.pikemere.co.uk/blog/flot-tutorial-how-to-create-scatter-graphs/">making scatter plots</a>.

I used this to produce my first Flot scatter plot:

[code lang=html]
Scatter plot test

&lt;!--
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;flottest.css&quot;&gt; --&gt;
&lt;script src=&quot;jquery-1.11.1.js&quot; language=&quot;javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;jquery.flot.js&quot; language=&quot;javascript&quot;&gt;&lt;/script&gt;

&lt;script&gt;// &lt;![CDATA[
var d1 = [[0,1],[1,2],[3,8],[5,4],[2,10],[1.2,9],[9,2]];

        $(document).ready(function(){
                $.plot($(&quot;#placeholder&quot;), [d1], {
                            series: {
                                        points: {
                                        radius: 3,
                                        show: true,
                                        fill: true,
                                        fillColor: &quot;#058DC7&quot;
                                    },
                                    color: &quot;#058DC7&quot;
                            }
                                });
            });

// ]]&gt;&lt;/script&gt;

&nbsp;
&lt;div id=&quot;placeholder&quot;&gt;&lt;/div&gt;
[/code]

<a id="2July"></a>

<hr />

<h2>Wednesday 2nd July</h2>

The next task was to get the longitude-latitude data (<code>worldmap.dat</code>) into a Flot-readable format, i.e. a JSON file that looks something like this:

[code lang=text]
{
label: &quot;some stuff&quot;,
data: [[0, 3], [10, 3], [20, 7]]
}
[/code]

First I needed to finally get round to cleaning all the '&gt;' lines out of the data file. Pyxplot complained about them but still ran so I never bothered to remove them. Luckily this is one thing I knew how to do in the terminal:

[code lang=sh]
sed -i &#039;s/&gt;//g&#039; worldmap.dat
[/code]

Next, I used my Python file I/O practice to convert to Flot format, again using the shortened file <code>shortmap.dat</code>. My first attempt was

[code lang=python]
coords = []

f = open(&#039;shortmap.dat&#039;, &#039;r&#039;)

for line in f:
line = line.split() # split each line of data file by whitespace
coords.append(line)

print coords

[/code]

This gave me a list of strings:

[code lang=text]
[[&#039;0.192440&#039;, &#039;5.669954&#039;], [&#039;-0.114995&#039;, &#039;5.515063&#039;], [&#039;-0.391921&#039;, &#039;5.360171&#039;], [&#039;-0.657114&#039;, &#039;5.195893&#039;], [&#039;-0.887104&#039;, &#039;5.151303&#039;], [&#039;-1.262597&#039;, &#039;5.062123&#039;], [&#039;-1.417488&#039;, &#039;5.008146&#039;], [&#039;-1.560645&#039;, &#039;4.874377&#039;], [&#039;-1.736658&#039;, &#039;4.775809&#039;], [&#039;-1.936139&#039;, &#039;4.68663&#039;], [&#039;-2.198985&#039;, &#039;4.787544&#039;]]
[/code]

To fix that, I changed the <code>for</code> loop to

[code lang=python]
for line in f:
line = line.split() # split each line of data file by whitespace
longitude = float(line[0])
latitude = float(line[1])
coordentry = [longitude, latitude]
coords.append(coordentry)
[/code]

Probably not the neatest thing but it worked. Next I added the 'label' entry of the JSON format and exported it, giving me the final script

[code lang=python]
# Get coordinate data and export in Flot-compatible JSON format

import json

# Get the coordinates into a Python list:

coords = []

f = open(&#039;shortmap.dat&#039;, &#039;r&#039;)

for line in f:
line = line.split() # split each line of data file by whitespace
longitude = float(line[0])
latitude = float(line[1])
coordentry = [longitude, latitude]
coords.append(coordentry)

mapdata = {&#039;label&#039;:&#039;World map&#039;, &#039;coords&#039;: coords}

# Encode mapdata in JSON format and print to file

with open(&quot;shortmap.json&quot;, &quot;w&quot;) as outfile:
json.dump(mapdata, outfile)

[/code]

<a id="3July"></a>

<hr />

<h2>Thursday 3rd July</h2>

Today I had a nice easy task of typing these notes into Markdown, as they were getting unwieldy in a big text file. I used the <a href="dillinger.io">Dillinger.io</a> online text editor as I was not too familiar with the syntax and some immediate visual feedback was useful.

This was enjoyable as Markdown is <em>very</em> easy to use. The main challenge was to hold off reading up on the .io top level domain, which I didn't realise was for the British Indian Ocean Territory. It looks like an interesting story, and not one the British are going to come out of well...

<a id="7July"></a>

<hr />

<h2>Monday 7th July</h2>

What an unmotivated day. I got to 3:14 pm having done nothing remotely useful. Time to work...

I tried my Python script <code>getdata.py</code> from Wednesday on the longer data list (<code>mapdata.dat</code>) and see how it coped. It didn't work because of whitespace in the data (there is a blank line between each continent/island). The whitespace may be useful later if I plot the data with lines between points, but for now just removed the whitespace:

[code lang=python]
for line in f:
line = line.strip() # get rid of blank lines
if line:
line = line.split() # split each line of data file by whitespace
longitude = float(line[0])
latitude = float(line[1])
coordentry = [longitude, latitude]
coords.append(coordentry)

[/code]

That gave me a big old list of points.

Next I wanted to plot this in Flot, which required figuring out how to plot an external JSON file in Flot. I found <a href="//stackoverflow.com/a/12479182">this example</a> to test.

After AGES of wondering what could possibly be wrong with it, I thought to try another browser. It worked in Firefox but not Chrome. After googling around I discovered <a href="https://code.google.com/p/chromium/issues/detail?id=40787&amp;q=ajax%20local&amp;colspec=ID%20Stars%20Pri%20Area%20Feature%20Type%20Status%20Summary%20Modified%20Owner%20Mstone%20OS">Chrome doesn't like to load local files for security reasons.</a>

I could apparently get around this by sorting out some kind of local server but didn't want to figure that out right then. So Firefox it is. I got it to work with

[code lang=html]
Scatter plot test

&lt;script src=&quot;jquery-1.11.1.js&quot; language=&quot;javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;jquery.flot.js&quot; language=&quot;javascript&quot;&gt;&lt;/script&gt;

&lt;script&gt;// &lt;![CDATA[
$(document).ready(function(){
                $.getJSON(&quot;worldmap.json&quot;, function(json) {

                var plotarea = $(&quot;#placeholder&quot;);
                var coords=json.coords;

                    $.plot(plotarea , [{

                    data: coords,
                points: {radius: 0.1, show: true, fill: true, fillColor: &quot;#006600&quot;},

                            }]
                    );
                });
        });

// ]]&gt;&lt;/script&gt;

&nbsp;
&lt;div id=&quot;placeholder&quot;&gt;&lt;/div&gt;
&nbsp;

[/code]

I took a screenshot of a recognisable world map...

<a href="https://wotidun.files.wordpress.com/2014/07/worldmap.png"><img class="alignnone size-medium wp-image-60" src="http://wotidun.files.wordpress.com/2014/07/worldmap.png?w=300" alt="worldmap" width="300" height="150" /></a>

... but it was very, very slow as <code>worldmap.dat</code> is a huge file. Need to think about how to improve on this.

<a id="8July"></a>

<hr />

<h2>Tuesday 8th July</h2>

After some thought, I realised I was getting to the point where the 'making it up as I go along' method was running out of steam (though I learnt a lot with it). Certainly the current method of plotting points in Flot was extremely slow, and I needed to use some more specialist mapping tools. So I looked back at the <a href="http://cartography.oregonstate.edu/publications.html">original paper I found</a> and also did some unfocused browsing around, skimming through a bewildering range of tools and frameworks - HTML Canvas, <a href="http://raphaeljs.com/">Raphaël</a>, <a href="http://get.webgl.org/">WebGL</a>, and some others I've now forgotten...

Then I got frustrated, procrastinated for a while, and <em>somehow</em> ended up clicking a trail of links to something useful, a post about <a href="http://www.gyford.com/phil/writing/2014/05/20/idiot.php">someone else</a> fighting to learn data visualisation methods. This is <em>not</em> my usual experience of procrastination! As well as amusing me with some familiar-sounding descriptions of the pain of learning something new, the specific library he was talking about, <a href="http://d3js.org/">D3</a> (Data-Driven Documents), also looked like it was worth investigating... despite all the trouble he had learning it. The <a href="https://github.com/mbostock/d3/wiki/Gallery">examples gallery</a> looked brilliant, so I decided to risk it.

I found a tutorial by Mike Bostock, <a href="http://bost.ocks.org/mike/map/"><em>Let's Build A Map</em></a>, that looked very clear and hopefully useful for my project. I also quickly realised Mike Bostock wrote the <a href="http://bost.ocks.org/mike/algorithms/">Visualising Algorithms</a> post I've seen linked to a couple of times and thought 'that looks really interesting, I'll read it later'. This time I <em>will</em> read that later... but not now, as there has been plenty of procrastination today already.

I was pleased to see that at least the first steps of the tutorial mentioned things I'd tried on the way - Natural Earth data and using <code>ogr2ogr</code> to convert to JSON form. I then installed Node.js and added <a href="https://github.com/mbostock/topojson">TopoJSON</a> (the specific data format he uses) and <a href="https://github.com/nodeapps/http-server">http-server</a> (a local server like I wanted yesterday, so that I can test the html I write). To start the local server I typed

[code lang=sh]
http-server -p 8008 &amp;
[/code]

in the terminal.

I plugged my way through the tutorial - can't say I understood everything, but I started to grasp the basics.

My main question though was... why is Bath plotted and not Bristol?

I also found <a href="http://www.d3noob.org/2013/03/a-simple-d3js-map-explained.html">this d3noob tutorial</a> on making a world map which should be useful.

<a id="9July"></a>

<hr />

<h2>Wednesday 9th July</h2>

I started off with the <a href="http://www.d3noob.org/2013/03/a-simple-d3js-map-explained.html">d3noob tutorial</a>. It's useful that d3 works out the projection for you and can rotate it arbitrarily... I suppose I won't be needing the maths from earlier. I also found another helpful <a href="http://christopheviau.com/d3list/gallery.html">set of examples</a>, which I've linked here so I don't forget about it.

It took me a while to get the tutorial to run - eventually I <a href="http://stackoverflow.com/questions/16739712/topojson-object-in-topojson-v1">discovered</a> that because I was using v1 of topojson rather than v0, I had to change one part of the code, so that

[code lang=html]
.data(topojson.object(topology, topology.objects.countries)
.geometries)
[/code]

became

[code lang=html]
.data(topojson.feature(topology, topology.objects.countries)
.features)
[/code]

Next, I tried to adapt <a href="http://bl.ocks.org/mbostock/2206489">click to center by projection example</a> for my own purposes, by bodging it together with the world map I had from the tutorial.

I used this to make the map projection rotate when I clicked on a point, but with no understanding of what I was doing the rescaling may as well have been at random. I decided it was time to go back and understand more of the D3 syntax using <a href="http://alignedleft.com/tutorials/d3/">Scott Murray's introductory tutorials</a>

This was definitely worth it: I started to grasp what all those 'append's, 'attr's and 'enter's meant.

<a id="10July"></a>

<hr />

<h2>Thursday 10th and Friday 11th July</h2>

Didn't spend much time on the project, but worked through a few more of the Scott Murray tutorials in the evenings. The syntax started to make sense, including the function arguments which were a bit of a mystery to me before. I also started to appreciate the power of D3: I'd only previously used plotting software, where there are a set of defaults for plotting bar charts, scatter plots etc. D3 is proper visualisation software where you design the plots from the ground up, starting with rectangles, circles and whatever else. As someone who already enjoys mucking around with SVGs in Inkscape, this was fun to learn ...

<a id="15July"></a>

<hr />

<h2>Tuesday 15th July</h2>

Success! I used a combination of the <a href="http://www.d3noob.org/2013/03/a-simple-d3js-map-explained.html">d3noob map tutorial</a> and the <a href="http://bl.ocks.org/mbostock/2206489">click-to-centre example</a> to create a Mercator projection map which recentres on a point you click on. The full script is below (<code>1_recenter.html</code>):

[code lang=html]
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://d3js.org/topojson.v1.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;// &lt;![CDATA[
var width = 960,
    height = 500;

var projection = d3.geo.mercator()

var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;) 
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height); // set SVG window 

var path = d3.geo.path()
    .projection(projection); // generate path 

var g = svg.append(&quot;g&quot;); 

d3.json(&quot;world-110m2.json&quot;, function(error, topology) {
    g.selectAll(&quot;path&quot;)
    .data(topojson.feature(topology, topology.objects.countries)
    .features)
    .enter()
    .append(&quot;path&quot;)
    .attr(&quot;d&quot;, path)
    .on(&quot;click&quot;, clicked);
});

function clicked(d) {

    var centroid = path.centroid(d);  

    projection.rotate([- projection.invert(centroid)[0], - projection.invert(centroid)[1]]);

  // Transition to the new projection.

    g.selectAll(&quot;path&quot;)
    .transition()
        .duration(0)
        .attr(&quot;d&quot;, path); 
}
// ]]&gt;&lt;/script&gt;

&nbsp;

[/code]

It works nicely! <a href="http://bl.ocks.org/lucykeer/c96d7a43b75dba13c545">Here's a live version online.</a>
I could think of a number of ways to improve or extend it, though, of varying difficulty:

<ol>
<li>Some kind of cursor to show where you are selecting as the centre would be good</li>
<li>It only works if you click on the land. Can the ocean be included?</li>
<li>It would be nice to have a pretty transition between the two views. However my most basic attempt at this (setting <code>.transition().duration(500)</code>) didn't work, because of the problem of continents that are chopped in half in one view reforming in the new view, and vice versa. This might actually be a pain to redo.</li>
<li>More generally, I'd like a scrollable map that changes projection as you move around</li>
</ol>

Ideas 1. and 2. seemed more tractable and if I solved them I'd have a pretty good finished visualisation in its own right, so I started there. I can think about 3. and 4. if I come back to this project later.

For tackling 1., I started by trying to adapt the cursor from <a href="http://bl.ocks.org/mbostock/929623">this graph example</a>.

The main problem was getting the ordering of the clicks and mouseovers correct. The bit that took me ages to work out was adding <code>pointer-events:none</code> in the CSS for the cursor. Otherwise D3 didn't 'see through' the cursor to the map below, so the click-to-recentre wasn't working.

Problem 2. turned out to be easy... once I knew how. I just needed to move <code>.on("click", clicked)</code> from the map data to the svg window itself, as below:

[code lang=html]
var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
.attr(&quot;width&quot;, width)
.attr(&quot;height&quot;, height)
.on(&quot;mousemove&quot;, mousemove)
.on(&quot;click&quot;, clicked); // new line

[/code]

I also had to rewrite the recentring, ending up with something simpler anyway, using the mouse click coordinates rather than the <code>path.centroid</code> coordinates:

[code lang=html]
var newcentre = d3.mouse(this)
projection.rotate([- projection.invert(newcentre)[0], - projection.invert(newcentre)[1]]);

[/code]

Anyway <a href="http://bl.ocks.org/lucykeer/d9128e307c426613c834">here is the final version!</a> Pretty pleased with that...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2014-07-16 13:38:09</wp:post_date>
  <wp:post_date_gmt>2014-07-16 13:38:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wot-i-dun-map-projections-project</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="d3"><![CDATA[d3]]></category>
  <category domain="post_tag" nicename="d3-js"><![CDATA[d3.js]]></category>
  <category domain="post_tag" nicename="data-visualisation"><![CDATA[data visualisation]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="post_tag" nicename="map"><![CDATA[map]]></category>
  <category domain="post_tag" nicename="map-projection"><![CDATA[map projection]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>worldmap_basic</title>
  <link>https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/worldmap_basic/</link>
  <pubDate>Wed, 16 Jul 2014 09:09:47 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/worldmap_basic.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>38</wp:post_id>
  <wp:post_date>2014-07-16 09:09:47</wp:post_date>
  <wp:post_date_gmt>2014-07-16 09:09:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>worldmap_basic</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/worldmap_basic.pdf</wp:attachment_url>
</item>
<item>
  <title>worldmap_basic</title>
  <link>https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/worldmap_basic-2/#main</link>
  <pubDate>Wed, 16 Jul 2014 09:11:49 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/worldmap_basic.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2014-07-16 09:11:49</wp:post_date>
  <wp:post_date_gmt>2014-07-16 09:11:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>worldmap_basic-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/worldmap_basic.png</wp:attachment_url>
</item>
<item>
  <title>bigmess</title>
  <link>https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/bigmess/#main</link>
  <pubDate>Wed, 16 Jul 2014 09:17:27 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/bigmess.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2014-07-16 09:17:27</wp:post_date>
  <wp:post_date_gmt>2014-07-16 09:17:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bigmess</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/bigmess.png</wp:attachment_url>
</item>
<item>
  <title>prettymess</title>
  <link>https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/prettymess/#main</link>
  <pubDate>Wed, 16 Jul 2014 09:21:25 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/prettymess.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>2014-07-16 09:21:25</wp:post_date>
  <wp:post_date_gmt>2014-07-16 09:21:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>prettymess</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/prettymess.png</wp:attachment_url>
</item>
<item>
  <title>worldmap_recentre</title>
  <link>https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/worldmap_recentre/#main</link>
  <pubDate>Wed, 16 Jul 2014 10:35:53 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/worldmap_recentre.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2014-07-16 10:35:53</wp:post_date>
  <wp:post_date_gmt>2014-07-16 10:35:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>worldmap_recentre</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/worldmap_recentre.png</wp:attachment_url>
</item>
<item>
  <title>worldmap</title>
  <link>https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/worldmap/#main</link>
  <pubDate>Wed, 16 Jul 2014 11:02:38 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/worldmap.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>60</wp:post_id>
  <wp:post_date>2014-07-16 11:02:38</wp:post_date>
  <wp:post_date_gmt>2014-07-16 11:02:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>worldmap</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/worldmap.png</wp:attachment_url>
</item>
<item>
  <title>screenshot</title>
  <link>https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/screenshot/#main</link>
  <pubDate>Wed, 16 Jul 2014 13:13:55 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/screenshot.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2014-07-16 13:13:55</wp:post_date>
  <wp:post_date_gmt>2014-07-16 13:13:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/screenshot.png</wp:attachment_url>
</item>
<item>
  <title>kelvinbackground</title>
  <link>https://wotidun.wordpress.com/?attachment_id=80</link>
  <pubDate>Wed, 16 Jul 2014 13:45:00 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/kelvinbackground.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>80</wp:post_id>
  <wp:post_date>2014-07-16 13:45:00</wp:post_date>
  <wp:post_date_gmt>2014-07-16 13:45:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kelvinbackground</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/kelvinbackground.pdf</wp:attachment_url>
</item>
<item>
  <title>kelvinbackground</title>
  <link>https://wotidun.wordpress.com/?attachment_id=81</link>
  <pubDate>Wed, 16 Jul 2014 13:45:49 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/kelvinbackground1.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>81</wp:post_id>
  <wp:post_date>2014-07-16 13:45:49</wp:post_date>
  <wp:post_date_gmt>2014-07-16 13:45:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kelvinbackground-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/kelvinbackground1.pdf</wp:attachment_url>
</item>
<item>
  <title>kelvinbackground</title>
  <link>https://wotidun.wordpress.com/?attachment_id=82</link>
  <pubDate>Wed, 16 Jul 2014 13:46:57 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/kelvinbackground2.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2014-07-16 13:46:57</wp:post_date>
  <wp:post_date_gmt>2014-07-16 13:46:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kelvinbackground-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/kelvinbackground2.pdf</wp:attachment_url>
</item>
<item>
  <title>kelvinbackground</title>
  <link>https://wotidun.wordpress.com/?attachment_id=83</link>
  <pubDate>Wed, 16 Jul 2014 13:49:00 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/kelvinbackground.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>83</wp:post_id>
  <wp:post_date>2014-07-16 13:49:00</wp:post_date>
  <wp:post_date_gmt>2014-07-16 13:49:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kelvinbackground-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/kelvinbackground.png</wp:attachment_url>
</item>
<item>
  <title>kelvinbackground</title>
  <link>https://wotidun.wordpress.com/?attachment_id=84</link>
  <pubDate>Wed, 16 Jul 2014 13:50:02 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/kelvinbackground3.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>84</wp:post_id>
  <wp:post_date>2014-07-16 13:50:02</wp:post_date>
  <wp:post_date_gmt>2014-07-16 13:50:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kelvinbackground-5</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/kelvinbackground3.pdf</wp:attachment_url>
</item>
<item>
  <title>kelvinbackground</title>
  <link>https://wotidun.wordpress.com/?attachment_id=85</link>
  <pubDate>Wed, 16 Jul 2014 13:52:52 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/kelvinbackground.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>85</wp:post_id>
  <wp:post_date>2014-07-16 13:52:52</wp:post_date>
  <wp:post_date_gmt>2014-07-16 13:52:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kelvinbackground-6</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/kelvinbackground.jpg</wp:attachment_url>
</item>
<item>
  <title>mode50</title>
  <link>https://wotidun.wordpress.com/?attachment_id=86</link>
  <pubDate>Wed, 16 Jul 2014 14:04:57 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/mode50.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>86</wp:post_id>
  <wp:post_date>2014-07-16 14:04:57</wp:post_date>
  <wp:post_date_gmt>2014-07-16 14:04:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mode50</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/mode50.gif</wp:attachment_url>
</item>
<item>
  <title>dimension</title>
  <link>https://wotidun.wordpress.com/?attachment_id=87</link>
  <pubDate>Wed, 16 Jul 2014 14:12:20 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2014/07/dimension.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>87</wp:post_id>
  <wp:post_date>2014-07-16 14:12:20</wp:post_date>
  <wp:post_date_gmt>2014-07-16 14:12:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dimension</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2014/07/dimension.png</wp:attachment_url>
</item>
<item>
  <title>Wot I lerned: Weak measurement</title>
  <link>https://wotidun.wordpress.com/?p=88</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.wordpress.com/?p=88</guid>
  <description/>
  <content:encoded><![CDATA[Some preliminaries:

<h2>Tensor products</h2>

In the introductory quantum courses I took, measurement just occurred by hitting the state vector $latex \left| \psi \right&gt;$ with some operator $latex A$. Then, boom! measurement occurs with expectation value $latex \left$.
involves coupling the quantum system you're interested in to a measuring device

I'm pretty used to how this works in <a href="http://en.wikipedia.org/wiki/Tensor_calculus">other contexts</a> but was worth learning (relearning?) how this is done in quantum physics. I like to do concrete calculations rather than 
<a href="http://en.wikipedia.org/wiki/Kronecker_product">Kronecker product</a>

$latex \mathbf{A}\otimes\mathbf{B} = \begin{pmatrix} a_{11} \mathbf{B} &amp; \cdots &amp; a_{1n}\mathbf{B} \\ \vdots &amp; \ddots &amp; \vdots \\ a_{m1} \mathbf{B} &amp; \cdots &amp; a_{mn} \mathbf{B} \end{pmatrix} $

<h2>Density matrix</h2>

$latex \rho = \left| \psi \right&gt;\left&lt; \psi \right| &amp;s=1$

E.g.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>88</wp:post_id>
  <wp:post_date>2014-08-06 13:12:12</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Wot i dun: standing waves on a string project</title>
  <link>https://wotidun.wordpress.com/?p=102</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.wordpress.com/?p=102</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Intro</h1>

Originally inspired to try Pygame for physics visualisations by <a href="Intro">Peter Collingwood's excellent physics tutorials</a> which I worked through a while ago to start getting the idea of Python. I'm not too sure it's the best tool for producing the kind of thing I want (I will definitely be considering redoing this particular project as an interactive web visualisation in d3.js), but it's been good for starting to learn the language.

=====

Originally inspired to try Pygame for physics visualisations by <a href="Intro">Peter Collingwood's excellent physics tutorials</a> which I worked through a while ago to start getting the idea of Python. I'm not too sure it's the best tool for producing the kind of thing I want (I will definitely be considering redoing this particular project as an interactive web visualisation in d3.js), but it's been good for starting to learn the language.

<a href="Intro">collingwood</a>:

My original idea for a Pygame project was to produce some demonstrations relating to <a href="http://en.wikipedia.org/wiki/Weak_measurement">weak measurements in quantum mechanics,</a> a subject I'm currently trying to learn more about. Despite the rather dry and factual name, the theory of weak measurement has led to all kinds of strange experiments that are bizarre even by quantum standards (e.g. the recent <a href="http://www.bbc.co.uk/news/science-environment-28543990">Quantum Cheshire Cat experiment</a>). In particular, I wanted to create my own version of the model in <a href="mafija.fmf.uni-lj.si/seminar/files/2012_2013/Weak_koncni.pdf">this master's project paper</a>. I have a few notes on this, but mainly I just found myself going down the rabbit hole of trying to understand weak measurement and not doing much coding.

Then I got a temp job for a couple of months, scanning and sorting post in a law firm, so I decided to give weak measurement a rest for a bit and pick a relatively straightforward project that I could work on half asleep in the library some evenings (I wanted to be able to say I done <em>something</em> with my week other than scanning post). I still wanted something physics-y, so decided to make my own version of this nice <a href="http://www.phy.hk/wiki/englishhtm/StatWave.htm">Java applet</a> I'd come across demonstrating resonance on a string as the frequency of vibration changes.

The maths is in a pdf <a href="phy.hk/wiki/applets/StatWave/WaveOnRope.pdf">here</a> -- the main reason I picked this project is that I hadn't actually seen this exact problem solved before, with the oscillating boundary for the string. I started by just using Pygame to model the function given in the pdf (which is pretty terse) and only thought about deriving the maths for myself later.

!!add contents page

<h1>Monday 18th August</h1>

First I found a <a href="http://ericeastwood.com/blog/7/animated-sine-wave-two-ways-with-pygame-and-tkinter">similar pygame project</a> that just plots an animated sine wave running, so that I had something to build on. This took a while as I only had my netbook on me, which was missing pygame and some other stuff... but I got it working.

Then I mucked about for a while, trying to implement the function inside the sum in the <a href="phy.hk/wiki/applets/StatWave/WaveOnRope.pdf">pdf</a>, i.e.

!! insert maths here
It didn't quite work, but that was enough for one evening.

<h1>Tuesday 19th August</h1>

I found my silly errors from the previous day and got going. I ended up with this function definition (I don't want damping... !!should have explained in maths)

[code lang=text]
&lt;br /&gt;# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i, frequency)
        return sum

# some more irrelevant stuff...

for x in range(0, canvas_width):
    y = int((canvas_height/2) + amplitude*ysum(x, 12))
        surface.set_at((x, y), color)


[/code]

Seems to work nicely, as far as I can tell by just playing with different numbers for the frequency! Will be able to test it better once I've implemented some kind of interactive way to change the frequency... that is definitely a problem for another day when I'm less tired.

Then I remembered I need psi... I started to add this, ending up with:

[code lang=text]
&lt;br /&gt;import pygame
import time
import math


# Some config width height settings
canvas_width = 640
canvas_height = 480

# Just define some colors we can use
color = pygame.Color(255, 255, 0, 0)
background_color = pygame.Color(0, 0, 0, 0)


pygame.init()
# Set the window title
pygame.display.set_caption(&quot;Standing wave demonstration&quot;)

# Make a screen to see
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_color)

# Make a surface to draw on
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_color)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i, frequency)
        return sum

def y(x, frequency):
    return int((2/math.pi)*amplitude*ysum(x, frequency))

 #      y = int((canvas_height/2) + amplitude*math.sin(frequency*((float(x)/canvas_width)*(2*math.pi) + (speed*time.time()))))

# Simple main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw the background
    surface.fill(background_color)

    for x in range(0, canvas_width):
    psi = int((canvas_height/2) + y(x, 3) + (1 - (x/canvas_width))*amplitude*math.cos(3*(speed*time.time())))
        surface.set_at((x, psi), color)

    # Put the surface we draw on, onto the screen
    screen.blit(surface, (0, 0))

    # Show it.
    pygame.display.flip()

pygame.quit ()

[/code]

This is definitely broken (the right end isn't fixed and should be), but I am tired and hungry so will leave it there for now.

<h1>Thursday 21st August</h1>

Tidied the code up a bit and got it working in the process (`standing_wave_1.py'). Here it is:

[code lang=python]
&lt;br /&gt;import pygame
import time
import math


# Size of window
canvas_width = 640
canvas_height = 480

# Define colours
color = pygame.Color(255, 255, 0, 0)
background_color = pygame.Color(0, 0, 0, 0)


pygame.init()
# Set the window title
pygame.display.set_caption(&quot;Standing wave demonstration&quot;)

# Make a screen to see
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_color)

# Make a surface to draw on
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_color)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i, frequency)
        return sum

def y(x, frequency):
    return (2/math.pi)*amplitude*ysum(x, frequency)

def psi(x, frequency):
    return y(x, frequency) + amplitude*(1 - (float(x)/canvas_width))*math.cos(frequency*(speed*time.time()))

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    screen.blit(surface, (0, 0))

    # Display 
    pygame.display.fliphttp://www.pygame.org/docs/ref/draw.html()

pygame.quit ()


[/code]

<h1>Sunday 24th August</h1>

Now the maths is sorted, want to make the animation look prettier. This involves changing the colours (easy) and the thickness of the curve (not quite so easy, as the very simple code I followed worked by changing the colour of single pixels). Time to use the draw function, following this <a href="http://www.pygame.org/docs/ref/draw.html">Pygame drawing tutorial</a> to rewrite code.

First I made a simple sine curve (<code>drawsin.py</code>):

[code lang=python]
&lt;br /&gt;# Draw sine curve with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Sine curve properties:
amplitude = 80

xpoints = [i for i in range(canvas_width)]
ypoints = []
for x in xpoints:
    ypoints.append(int((canvas_height/2) + amplitude*math.sin((float(x)/canvas_width)*2*math.pi)))

coords = []
for i in range(canvas_width):
    coords.append([xpoints[i], ypoints[i]])


print ypoints[1:10]

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False


# Draw sine curve

    pygame.draw.lines(screen, line_colour, False, coords, 3)

    pygame.display.flip()   

pygame.quit()

[/code]

Then I added this to my file (<code>standing_wave_2.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_colour)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i, frequency)
        return sum

def y(x, frequency):
    return (2/math.pi)*amplitude*ysum(x, frequency)

def psi(x, frequency):
    return y(x, frequency) + amplitude*(1 - (float(x)/canvas_width))*math.cos(frequency*(speed*time.time()))



# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw background
    surface.fill(background_colour)

    xpoints = [i for i in range(canvas_width)]
    ypoints = []
    for x in xpoints:
        ypoints.append(int((canvas_height/2) + psi(x,32)))

    coords = []
    for i in range(len(xpoints)):
        coords.append([xpoints[i], ypoints[i]])

    # Draw curve
    pygame.draw.lines(surface, line_colour, False, coords, 3)

    # Add surface to screen
        screen.blit(surface, (0, 0))

    pygame.display.flip()   

pygame.quit()



[/code]

It works fine, but it's kind of slow... after a bit of searching around decided to go back to the pixel-updating method of the example I followed. Here's the code (<code>standing_wave_4.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height)).convert()
surface.fill(background_colour)

# Define standing wave function

amplitude = 50 # in px
frequency = 45


def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))

def ysum(x):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i)
        return sum

def y(x):
    return (2/math.pi)*amplitude*ysum(x)

def psi(x):
    return y(x) + amplitude*(1 - (float(x)/canvas_width))

#pygame.init()

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw background
    surface.fill(background_colour)

    for xrange in range(0, canvas_width):
    yrange = int((canvas_height/2) + psi(xrange)*math.cos(frequency*time.time()))
    for i in range(0, 4):
        surface.set_at((xrange, yrange + i), line_colour)

    # Add surface to screen
    screen.blit(surface, (0, 0))

    # Display 
    pygame.display.flip()   

pygame.quit()

[/code]

Works OK. Next need to add some interactivity.

<h1>Tuesday 26th August</h1>

Added some very crude interactivity: use left and right arrows to control frequency (using <a href="http://stackoverflow.com/questions/16044229/how-to-get-keyboard-input-in-pygame">this example</a> as a guide), plus some text at the top of the screen displaying the current frequency (based on <a href="http://www.pygame.org/docs/tut/tom/games2.html">this example</a>).

The full code is (<code>standing_wave_5.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)
slider_colour = pygame.Color(0, 0, 0, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height)).convert()
surface.fill(background_colour)

# Define standing wave function

amplitude = 80 # in px
frequency = 200
speed = 0.1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))

def ysum(x):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i)
        return sum

def y(x):
    return (2/math.pi)*amplitude*ysum(x)

def psi(x):
    return y(x) + amplitude*(1 - (float(x)/canvas_width))

pygame.init()

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw background
    surface.fill(background_colour)

    for xrange in range(0, canvas_width):
    yrange = int((canvas_height/2) + psi(xrange)*math.cos(speed*frequency*time.time()))
    for i in range(0, 4):
        surface.set_at((xrange, yrange + i), line_colour)

    # Display some text
    font = pygame.font.Font(None, 36)
    text = font.render(&quot;Frequency is &quot;+str(abs(frequency)), 1, (10, 10, 10))
    textpos = text.get_rect()
    textpos.centerx = surface.get_rect().centerx
    surface.blit(text, textpos)



    # Add surface to screen
    screen.blit(surface, (0, 0))

    # Display 
    pygame.display.flip()

    move_ticker = 0
    keys=pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        if move_ticker == 0:
            move_ticker = 10
            frequency -= 0.1
    if keys[pygame.K_RIGHT]:
        if move_ticker == 0:   
            move_ticker = 10     
            frequency += 0.1


pygame.quit()

[/code]

Took a screenshot (<code>screenshot1</code>)
This could do with some improvements:

<ul>
<li>make it easier to change the frequency a large amount... maybe an editable text box</li>
<li>at the moment when I change the frequency the curve is 'resetting' somehow so that the movement is not smooth.</li>
</ul>

<h1>Thursday 28 September</h1>

calculations

<h1>Monday 1 September</h1>

wrote intro
played with gui library

<h1>Tuesday 2 September</h1>

Bit more playing with gui library, went home early as getting a cold.
Not really sure this is the way I want to go.

<h1>Sunday 7th September</h1>

Realised code was wrong - curve wasn't changing shape with increasing frequency
found one problem - ysummand was not summing correctly and fixed that. still wrong tho.

tested in Mathematica and convinced myself the solution was correct - just not my implementation!

<h1>Monday 8th September</h1>

Found problem after testing various things - something to do with integers and floats. Currently if the frequency increment is a float it breaks, if it is an integer it doesn't. Can also break it by defining the amplitude and speed as floats. Need to go through carefully and work out what needs to be what - tomorrow!

My original idea for a Pygame project was to produce some demonstrations relating to <a href="http://en.wikipedia.org/wiki/Weak_measurement">weak measurements in quantum mechanics,</a> a subject I'm currently trying to learn more about. Despite the rather dry and factual name, the theory of weak measurement has led to all kinds of strange experiments that are bizarre even by quantum standards (e.g. the recent <a href="http://www.bbc.co.uk/news/science-environment-28543990">Quantum Cheshire Cat experiment</a>). In particular, I wanted to create my own version of the model in <a href="mafija.fmf.uni-lj.si/seminar/files/2012_2013/Weak_koncni.pdf">this master's project paper</a>. I have a few notes on this, but mainly I just found myself going down the rabbit hole of trying to understand weak measurement and not doing much coding.

Then I got a temp job for a couple of months, scanning and sorting post in a law firm, so I decided to give weak measurement a rest for a bit and pick a relatively straightforward project that I could work on half asleep in the library some evenings (I wanted to be able to say I done <em>something</em> with my week other than scanning post). I still wanted something physics-y, so decided to make my own version of this nice <a href="http://www.phy.hk/wiki/englishhtm/StatWave.htm">Java applet</a> I'd come across demonstrating resonance on a string as the frequency of vibration changes.

The maths is in a pdf <a href="phy.hk/wiki/applets/StatWave/WaveOnRope.pdf">here</a> -- the main reason I picked this project is that I hadn't actually seen this exact problem solved before, with the oscillating boundary for the string. I started by just using Pygame to model the function given in the pdf (which is pretty terse) and only thought about deriving the maths for myself later.

!!add contents page

<h1>Monday 18th August</h1>

First I found a <a href="http://ericeastwood.com/blog/7/animated-sine-wave-two-ways-with-pygame-and-tkinter">similar pygame project</a> that just plots an animated sine wave running, so that I had something to build on. This took a while as I only had my netbook on me, which was missing pygame and some other stuff... but I got it working.

Then I mucked about for a while, trying to implement the function inside the sum in the <a href="phy.hk/wiki/applets/StatWave/WaveOnRope.pdf">pdf</a>, i.e.

!! insert maths here
It didn't quite work, but that was enough for one evening.

<h1>Tuesday 19th August</h1>

I found my silly errors from the previous day and got going. I ended up with this function definition (I don't want damping... !!should have explained in maths)

[code lang=text]
&lt;br /&gt;# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i, frequency)
        return sum

# some more irrelevant stuff...

for x in range(0, canvas_width):
    y = int((canvas_height/2) + amplitude*ysum(x, 12))
        surface.set_at((x, y), color)


[/code]

Seems to work nicely, as far as I can tell by just playing with different numbers for the frequency! Will be able to test it better once I've implemented some kind of interactive way to change the frequency... that is definitely a problem for another day when I'm less tired.

Then I remembered I need psi... I started to add this, ending up with:

[code lang=text]
&lt;br /&gt;import pygame
import time
import math


# Some config width height settings
canvas_width = 640
canvas_height = 480

# Just define some colors we can use
color = pygame.Color(255, 255, 0, 0)
background_color = pygame.Color(0, 0, 0, 0)


pygame.init()
# Set the window title
pygame.display.set_caption(&quot;Standing wave demonstration&quot;)

# Make a screen to see
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_color)

# Make a surface to draw on
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_color)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i, frequency)
        return sum

def y(x, frequency):
    return int((2/math.pi)*amplitude*ysum(x, frequency))

 #      y = int((canvas_height/2) + amplitude*math.sin(frequency*((float(x)/canvas_width)*(2*math.pi) + (speed*time.time()))))

# Simple main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw the background
    surface.fill(background_color)

    for x in range(0, canvas_width):
    psi = int((canvas_height/2) + y(x, 3) + (1 - (x/canvas_width))*amplitude*math.cos(3*(speed*time.time())))
        surface.set_at((x, psi), color)

    # Put the surface we draw on, onto the screen
    screen.blit(surface, (0, 0))

    # Show it.
    pygame.display.flip()

pygame.quit ()

[/code]

This is definitely broken (the right end isn't fixed and should be), but I am tired and hungry so will leave it there for now.

<h1>Thursday 21st August</h1>

Tidied the code up a bit and got it working in the process (`standing_wave_1.py'). Here it is:

[code lang=python]
&lt;br /&gt;import pygame
import time
import math


# Size of window
canvas_width = 640
canvas_height = 480

# Define colours
color = pygame.Color(255, 255, 0, 0)
background_color = pygame.Color(0, 0, 0, 0)


pygame.init()
# Set the window title
pygame.display.set_caption(&quot;Standing wave demonstration&quot;)

# Make a screen to see
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_color)

# Make a surface to draw on
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_color)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i, frequency)
        return sum

def y(x, frequency):
    return (2/math.pi)*amplitude*ysum(x, frequency)

def psi(x, frequency):
    return y(x, frequency) + amplitude*(1 - (float(x)/canvas_width))*math.cos(frequency*(speed*time.time()))

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw background
    surface.fill(background_color)

    for xrange in range(0, canvas_width):
    yrange = int((canvas_height/2) + psi(xrange, 23))
        surface.set_at((xrange, yrange), color)

    # Add surface to screen
    screen.blit(surface, (0, 0))

    # Display 
    pygame.display.fliphttp://www.pygame.org/docs/ref/draw.html()

pygame.quit ()


[/code]

<h1>Sunday 24th August</h1>

Now the maths is sorted, want to make the animation look prettier. This involves changing the colours (easy) and the thickness of the curve (not quite so easy, as the very simple code I followed worked by changing the colour of single pixels). Time to use the draw function, following this <a href="http://www.pygame.org/docs/ref/draw.html">Pygame drawing tutorial</a> to rewrite code.

First I made a simple sine curve (<code>drawsin.py</code>):

[code lang=python]
&lt;br /&gt;# Draw sine curve with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Sine curve properties:
amplitude = 80

xpoints = [i for i in range(canvas_width)]
ypoints = []
for x in xpoints:
    ypoints.append(int((canvas_height/2) + amplitude*math.sin((float(x)/canvas_width)*2*math.pi)))

coords = []
for i in range(canvas_width):
    coords.append([xpoints[i], ypoints[i]])


print ypoints[1:10]

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False


# Draw sine curve

    pygame.draw.lines(screen, line_colour, False, coords, 3)

    pygame.display.flip()   

pygame.quit()

[/code]

Then I added this to my file (<code>standing_wave_2.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_colour)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i, frequency)
        return sum

def y(x, frequency):
    return (2/math.pi)*amplitude*ysum(x, frequency)

def psi(x, frequency):
    return y(x, frequency) + amplitude*(1 - (float(x)/canvas_width))*math.cos(frequency*(speed*time.time()))



# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw background
    surface.fill(background_colour)

    xpoints = [i for i in range(canvas_width)]
    ypoints = []
    for x in xpoints:
        ypoints.append(int((canvas_height/2) + psi(x,32)))

    coords = []
    for i in range(len(xpoints)):
        coords.append([xpoints[i], ypoints[i]])

    # Draw curve
    pygame.draw.lines(surface, line_colour, False, coords, 3)

    # Add surface to screen
        screen.blit(surface, (0, 0))

    pygame.display.flip()   

pygame.quit()



[/code]

It works fine, but it's kind of slow... after a bit of searching around decided to go back to the pixel-updating method of the example I followed. Here's the code (<code>standing_wave_4.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height)).convert()
surface.fill(background_colour)

# Define standing wave function

amplitude = 50 # in px
frequency = 45


def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))

def ysum(x):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i)
        return sum

def y(x):
    return (2/math.pi)*amplitude*ysum(x)

def psi(x):
    return y(x) + amplitude*(1 - (float(x)/canvas_width))

#pygame.init()

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw background
    surface.fill(background_colour)

    for xrange in range(0, canvas_width):
    yrange = int((canvas_height/2) + psi(xrange)*math.cos(frequency*time.time()))
    for i in range(0, 4):
        surface.set_at((xrange, yrange + i), line_colour)

    # Add surface to screen
    screen.blit(surface, (0, 0))

    # Display 
    pygame.display.flip()   

pygame.quit()

[/code]

Works OK. Next need to add some interactivity.

<h1>Tuesday 26th August</h1>

Added some very crude interactivity: use left and right arrows to control frequency (using <a href="http://stackoverflow.com/questions/16044229/how-to-get-keyboard-input-in-pygame">this example</a> as a guide), plus some text at the top of the screen displaying the current frequency (based on <a href="http://www.pygame.org/docs/tut/tom/games2.html">this example</a>).

The full code is (<code>standing_wave_5.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)
slider_colour = pygame.Color(0, 0, 0, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height)).convert()
surface.fill(background_colour)

# Define standing wave function

amplitude = 80 # in px
frequency = 200
speed = 0.1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n):
    return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))

def ysum(x):
    for i in range (1, 10):
        sum = 0
        sum = sum + ysummand(x, i)
        return sum

def y(x):
    return (2/math.pi)*amplitude*ysum(x)

def psi(x):
    return y(x) + amplitude*(1 - (float(x)/canvas_width))

pygame.init()

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw background
    surface.fill(background_colour)

    for xrange in range(0, canvas_width):
    yrange = int((canvas_height/2) + psi(xrange)*math.cos(speed*frequency*time.time()))
    for i in range(0, 4):
        surface.set_at((xrange, yrange + i), line_colour)

    # Display some text
    font = pygame.font.Font(None, 36)
    text = font.render(&quot;Frequency is &quot;+str(abs(frequency)), 1, (10, 10, 10))
    textpos = text.get_rect()
    textpos.centerx = surface.get_rect().centerx
    surface.blit(text, textpos)



    # Add surface to screen
    screen.blit(surface, (0, 0))

    # Display 
    pygame.display.flip()

    move_ticker = 0
    keys=pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        if move_ticker == 0:
            move_ticker = 10
            frequency -= 0.1
    if keys[pygame.K_RIGHT]:
        if move_ticker == 0:   
            move_ticker = 10     
            frequency += 0.1


pygame.quit()

[/code]

Took a screenshot (<code>screenshot1</code>)
This could do with some improvements:

<ul>
<li>make it easier to change the frequency a large amount... maybe an editable text box</li>
<li>at the moment when I change the frequency the curve is 'resetting' somehow so that the movement is not smooth.</li>
</ul>

<h1>Thursday 28 September</h1>

calculations

<h1>Monday 1 September</h1>

wrote intro
played with gui library

<h1>Tuesday 2 September</h1>

Bit more playing with gui library, went home early as getting a cold.
Not really sure this is the way I want to go.

<h1>Sunday 7th September</h1>

Realised code was wrong - curve wasn't changing shape with increasing frequency
found one problem - ysummand was not summing correctly and fixed that. still wrong tho.

tested in Mathematica and convinced myself the solution was correct - just not my implementation!

<h1>Monday 8th September</h1>

Found problem after testing various things - something to do with integers and floats. Currently if the frequency increment is a float it breaks, if it is an integer it doesn't. Can also break it by defining the amplitude and speed as floats. Need to go through carefully and work out what needs to be what - tomorrow!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>102</wp:post_id>
  <wp:post_date>2014-09-09 17:51:13</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Wot I dun: standing waves on a string project</title>
  <link>https://wotidun.wordpress.com/2014/09/18/wot-i-dun-standing-waves-on-a-string-project/</link>
  <pubDate>Thu, 18 Sep 2014 17:55:37 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.wordpress.com/?p=103</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Wot I'm doing</h1>

I was originally inspired to try Pygame for physics visualisations by <a href="http://petercollingridge.co.uk/pygame-physics-simulation">Peter Collingridge's excellent physics tutorials</a> which I worked through a while ago to start getting the idea of Python. I'm not too sure it's the best tool for producing the kind of thing I want (I will definitely be considering redoing this particular project as an interactive web visualisation in d3.js), but it's been good for learning the language.

My original idea for a Pygame project was to produce some demonstrations relating to <a href="http://en.wikipedia.org/wiki/Weak_measurement">weak measurements in quantum mechanics,</a> a subject I'm currently trying to learn more about. Despite the rather dry and factual name, the theory of weak measurement has led to all kinds of strange experiments that are bizarre even by quantum standards (e.g. the recent <a href="http://www.bbc.co.uk/news/science-environment-28543990">Quantum Cheshire Cat experiment</a>). In particular, I wanted to create my own version of the model in <a href="mafija.fmf.uni-lj.si/seminar/files/2012_2013/Weak_koncni.pdf">this master's project paper</a>. I have a few notes on this, but mainly I just found myself going down the rabbit hole of trying to understand weak measurement and not doing much coding.

Then I needed to earn some more money and got a temp job for a couple of months, scanning and sorting post in a law firm, so I decided to give weak measurement a rest for a bit and pick a relatively straightforward project that I could work on half asleep in the library some evenings. After all, I wanted to be able to say I done <em>something</em> with my week other than scanning post. I still wanted something physics-y, so decided to make my own version of this nice <a href="http://www.phy.hk/wiki/englishhtm/StatWave.htm">Java applet</a> I'd come across demonstrating resonance on a string as the frequency of vibration changes.

The maths is in a pdf <a href="http://www.phy.hk/wiki/applets/StatWave/WaveOnRope.pdf">here</a> -- the main reason I picked this project is that I hadn't actually seen this exact problem solved before, with the oscillating boundary for the string. I started by just using Pygame to model the function given in the pdf (which is pretty terse) and will get round to deriving the maths for myself later.

<h1>Contents:</h1>

<ul>
<li><a href="#18Aug">Monday 18th August:</a> Install pygame, run someone else's code to produce an animated sine function</li>
<li><a href="#19Aug">Tuesday 19th August:</a> Try and plot the function I wanted... slightly broken</li>
<li><a href="#21Aug">Thursday 21st August:</a> Fix the function </li>
<li><a href="#24Aug">Sunday 24th August:</a> Make the animation prettier: change colours and line thickness</li>
<li><a href="#26Aug">Tuesday 26th August:</a> Add basic keyboard interactivity</li>
<li><a href="#1Sep">Monday 1st and Tuesday 2nd September:</a> Play around with a GUI library</li>
<li><a href="#7Sep">Sunday 7th September:</a> Oh shit, the code is broken! Check that the maths is correct in Mathematica</li>
<li><a href="#8Sep">Monday 8th September:</a> Problem is something to do with integers and floats...</li>
<li><a href="#9Sep">Tuesday 9th September:</a> More confused than ever.</li>
<li><a href="#15Sep">Monday 15th September:</a> Something to do with the wrong parameter range?</li>
<li><a href="#17Sep">Wednesday 17th September:</a> Played around in Mathematica again... seems to be a parameter range problem</li>
<li><a href="#18Sep">Thursday 18th September:</a> Picked some parameter values that give a decent animation</li>
</ul>

<!--more-->

<a id="18Aug"></a>

<h1>Monday 18th August</h1>

First I found a <a href="http://ericeastwood.com/blog/7/animated-sine-wave-two-ways-with-pygame-and-tkinter">pygame project</a> that just plots an animated sine wave running, so that I had something to build on. This took a while as I only had my netbook on me, which was missing pygame and some other stuff... but I got it working.

Then I mucked about for a while, trying to implement the function inside the sum in the equation for $latex y$ <a href="http://www.phy.hk/wiki/applets/StatWave/WaveOnRope.pdf">here</a>. I don't care about damping so I set $latex b=0 &amp;s=1$, i.e. I tried to plot the function $latex f(x, t) = \frac{k^2}{n}\frac{1}{k_n^2-k^2}\cos\omega t &amp;s=1$ (I also relabelled $latex z &amp;s=1$ as $latex x &amp;s=1$ because I preferred that).

It didn't quite work, but that was enough for one evening.

<a id="19Aug"></a>

<h1>Tuesday 19th August</h1>

I found my silly errors from the previous day and got going. I ended up with this function definition for $latex y(x,t) &amp;s=1$:

[code lang=python]
&lt;br /&gt;# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
return n*math.pi/canvas_width

def ysummand(x, n, frequency):
return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
for i in range (1, 10):
sum = 0
sum = sum + ysummand(x, i, frequency)
return sum

# some more irrelevant stuff...

for x in range(0, canvas_width):
y = int((canvas_height/2) + amplitude*ysum(x, 12))
surface.set_at((x, y), color)

[/code]

Seems to work nicely, as far as I can tell by just playing with different numbers for the frequency! Will be able to test it better once I've implemented some kind of interactive way to change the frequency... that is definitely a problem for another day when I'm less tired.

Then I remembered I need $latex psi$, not $latex y$... I started to add this, ending up with:

[code lang=python]
&lt;br /&gt;import pygame
import time
import math

# Some config width height settings
canvas_width = 640
canvas_height = 480

# Just define some colors we can use
color = pygame.Color(255, 255, 0, 0)
background_color = pygame.Color(0, 0, 0, 0)

pygame.init()
# Set the window title
pygame.display.set_caption(&quot;Standing wave demonstration&quot;)

# Make a screen to see
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_color)

# Make a surface to draw on
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_color)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
return n*math.pi/canvas_width

def ysummand(x, n, frequency):
return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
for i in range (1, 10):
sum = 0
sum = sum + ysummand(x, i, frequency)
return sum

def y(x, frequency):
return int((2/math.pi)*amplitude*ysum(x, frequency))

# y = int((canvas_height/2) + amplitude*math.sin(frequency*((float(x)/canvas_width)*(2*math.pi) + (speed*time.time()))))

# Simple main loop
running = True
while running:
for event in pygame.event.get():
if event.type == pygame.QUIT:
running = False

# Redraw the background
surface.fill(background_color)

for x in range(0, canvas_width):
psi = int((canvas_height/2) + y(x, 3) + (1 - (x/canvas_width))*amplitude*math.cos(3*(speed*time.time())))
surface.set_at((x, psi), color)

# Put the surface we draw on, onto the screen
screen.blit(surface, (0, 0))

# Show it.
pygame.display.flip()

pygame.quit ()

[/code]

This is definitely broken (the right end isn't fixed and should be), but I am tired and hungry so will leave it there for now.

<a id="21Aug"></a>

<h1>Thursday 21st August</h1>

Tidied the code up a bit and got it working in the process (as far as I can see - the right end is now fixed). Here it is:

[code lang=python]
&lt;br /&gt;import pygame
import time
import math

# Size of window
canvas_width = 640
canvas_height = 480

# Define colours
color = pygame.Color(255, 255, 0, 0)
background_color = pygame.Color(0, 0, 0, 0)

pygame.init()
# Set the window title
pygame.display.set_caption(&quot;Standing wave demonstration&quot;)

# Make a screen to see
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_color)

# Make a surface to draw on
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_color)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
return n*math.pi/canvas_width

def ysummand(x, n, frequency):
return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
for i in range (1, 10):
sum = 0
sum = sum + ysummand(x, i, frequency)
return sum

def y(x, frequency):
return (2/math.pi)*amplitude*ysum(x, frequency)

def psi(x, frequency):
return y(x, frequency) + amplitude*(1 - (float(x)/canvas_width))*math.cos(frequency*(speed*time.time()))

# Main loop
running = True
while running:
for event in pygame.event.get():
if event.type == pygame.QUIT:
running = False

# Redraw background
surface.fill(background_color)

for xrange in range(0, canvas_width):
yrange = int((canvas_height/2) + psi(xrange, 23))
surface.set_at((xrange, yrange), color)

# Add surface to screen
screen.blit(surface, (0, 0))

# Display
pygame.display.fliphttp://www.pygame.org/docs/ref/draw.html()

pygame.quit ()

[/code]

<a id="24Aug"></a>

<h1>Sunday 24th August</h1>

Now the maths was sorted, I wanted to make the animation look prettier. This involved changing the colours (easy) and the thickness of the curve (not quite so easy, as the very simple code I followed worked by changing the colour of single pixels). Time to use the draw function, following this <a href="http://www.pygame.org/docs/ref/draw.html">Pygame drawing tutorial</a> to rewrite code.

First I made a simple sine curve (<code>drawsin.py</code>):

[code lang=python]
&lt;br /&gt;# Draw sine curve with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)

# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Sine curve properties:
amplitude = 80

xpoints = [i for i in range(canvas_width)]
ypoints = []
for x in xpoints:
ypoints.append(int((canvas_height/2) + amplitude*math.sin((float(x)/canvas_width)*2*math.pi)))

coords = []
for i in range(canvas_width):
coords.append([xpoints[i], ypoints[i]])

print ypoints[1:10]

# Main loop
running = True
while running:
for event in pygame.event.get():
if event.type == pygame.QUIT:
running = False

# Draw sine curve

pygame.draw.lines(screen, line_colour, False, coords, 3)

pygame.display.flip()

pygame.quit()

[/code]

Then I added this to my file (<code>standing_wave_2.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)

# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height))
surface.fill(background_colour)

# Define standing wave function

amplitude = 50 # in px
speed = 1

def k(n):
return n*math.pi/canvas_width

def ysummand(x, n, frequency):
return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))*math.cos(frequency*(speed*time.time()))

def ysum(x, frequency):
for i in range (1, 10):
sum = 0
sum = sum + ysummand(x, i, frequency)
return sum

def y(x, frequency):
return (2/math.pi)*amplitude*ysum(x, frequency)

def psi(x, frequency):
return y(x, frequency) + amplitude*(1 - (float(x)/canvas_width))*math.cos(frequency*(speed*time.time()))

# Main loop
running = True
while running:
for event in pygame.event.get():
if event.type == pygame.QUIT:
running = False

# Redraw background
surface.fill(background_colour)

xpoints = [i for i in range(canvas_width)]
ypoints = []
for x in xpoints:
ypoints.append(int((canvas_height/2) + psi(x,32)))

coords = []
for i in range(len(xpoints)):
coords.append([xpoints[i], ypoints[i]])

# Draw curve
pygame.draw.lines(surface, line_colour, False, coords, 3)

# Add surface to screen
screen.blit(surface, (0, 0))

pygame.display.flip()

pygame.quit()

[/code]

It works fine, but it's kind of slow... after a bit of searching around I decided to go back to the pixel-updating method of the example I followed. Here's the code (<code>standing_wave_4.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)

# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height)).convert()
surface.fill(background_colour)

# Define standing wave function

amplitude = 50 # in px
frequency = 45

def k(n):
return n*math.pi/canvas_width

def ysummand(x, n):
return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))

def ysum(x):
for i in range (1, 10):
sum = 0
sum = sum + ysummand(x, i)
return sum

def y(x):
return (2/math.pi)*amplitude*ysum(x)

def psi(x):
return y(x) + amplitude*(1 - (float(x)/canvas_width))

#pygame.init()

# Main loop
running = True
while running:
for event in pygame.event.get():
if event.type == pygame.QUIT:
running = False

# Redraw background
surface.fill(background_colour)

for xrange in range(0, canvas_width):
yrange = int((canvas_height/2) + psi(xrange)*math.cos(frequency*time.time()))
for i in range(0, 4):
surface.set_at((xrange, yrange + i), line_colour)

# Add surface to screen
screen.blit(surface, (0, 0))

# Display
pygame.display.flip()

pygame.quit()

[/code]

It worked OK, so my next plan was to add some interactivity.

<a id="26Aug"></a>

<h1>Tuesday 26th August</h1>

I added some very crude interactivity, using left and right arrows to control frequency (using <a href="http://stackoverflow.com/questions/16044229/how-to-get-keyboard-input-in-pygame">this example</a> as a guide), plus some text at the top of the screen displaying the current frequency (based on <a href="http://www.pygame.org/docs/tut/tom/games2.html">this example</a>).

The full code is (<code>standing_wave_5.py</code>):

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)
slider_colour = pygame.Color(0, 0, 0, 0)

# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height)).convert()
surface.fill(background_colour)

# Define standing wave function

amplitude = 80 # in px
frequency = 200
speed = 0.1

def k(n):
return n*math.pi/canvas_width

def ysummand(x, n):
return (frequency**2/(k(n)**2-frequency**2))*math.sin(k(n)*(float(x)))

def ysum(x):
for i in range (1, 10):
sum = 0
sum = sum + ysummand(x, i)
return sum

def y(x):
return (2/math.pi)*amplitude*ysum(x)

def psi(x):
return y(x) + amplitude*(1 - (float(x)/canvas_width))

pygame.init()

# Main loop
running = True
while running:
for event in pygame.event.get():
if event.type == pygame.QUIT:
running = False

# Redraw background
surface.fill(background_colour)

for xrange in range(0, canvas_width):
yrange = int((canvas_height/2) + psi(xrange)*math.cos(speed*frequency*time.time()))
for i in range(0, 4):
surface.set_at((xrange, yrange + i), line_colour)

# Display some text
font = pygame.font.Font(None, 36)
text = font.render(&quot;Frequency is &quot;+str(abs(frequency)), 1, (10, 10, 10))
textpos = text.get_rect()
textpos.centerx = surface.get_rect().centerx
surface.blit(text, textpos)

# Add surface to screen
screen.blit(surface, (0, 0))

# Display
pygame.display.flip()

move_ticker = 0
keys=pygame.key.get_pressed()
if keys[pygame.K_LEFT]:
if move_ticker == 0:
move_ticker = 10
frequency -= 0.1
if keys[pygame.K_RIGHT]:
if move_ticker == 0:
move_ticker = 10
frequency += 0.1

pygame.quit()

[/code]

Took a screenshot (<code>screenshot1</code>)
This could do with some improvements:

<ul>
<li>It would be worth making it easier to change the frequency a large amount... maybe with an editable text box</li>
<li>At the moment when I change the frequency the curve is 'resetting' somehow so that the movement is not smooth. Definitely need to fix this one!</li>
</ul>

<a id="28Aug"></a>

<h1>Thursday 28 August</h1>

Got out a pen and paper and actually started working through the maths. Will write this up some other time when it's finished.

<a id="1Sep"></a>

<h1>Monday 1 September</h1>

Wrote up some of this post and started thinking about how to change the frequency... a slider might be good. I played for a bit with a GUI library for Pygame, <a href="http://www.pygame.org/project-PGU+-+Phil's+pyGame+Utilities-108-.html">PGU</a>.

<a id="2Sep"></a>

<h1>Tuesday 2 September</h1>

Bit more playing with the GUI library, went home early as getting a cold. Not really sure this is the way I want to go - I think I will keep it simple for now and consider interactive options if I decide to implement this in d3.js instead of Python.

<a id="7Sep"></a>

<h1>Sunday 7th September</h1>

Oh shit! I realised the code was wrong -- the curve wasn't changing shape with increasing frequency. I didn't remember it always being wrong -- had I broken it? I found one problem: <code>ysummand</code> was not summing correctly. I fixed that, but it was still wrong.

I decided to reproduce $latex \psi &amp;s=1$ as a simple animation in Mathematica, a program where I actually know what I'm doing. I soon convinced myself the solution was correct -- just not my implementation!

<a id="8Sep"></a>

<h1>Monday 8th September</h1>

I found the problem after testing various things -- it's something to do with integers and floats. Currently if the frequency increment is a float it breaks, if it is an integer it doesn't. I must have had everything as integers to start with, which is why I didn't spot the problem. I can also break it by defining the amplitude and speed as floats. Need to go through carefully and work out what needs to be what... tomorrow!

<a id="9Sep"></a>

<h1>Tuesday 9th September</h1>

GAH I STILL CAN'T FIX IT. :(

<a id="15Sep"></a>

<h1>Monday 15th September</h1>

I'm more confused than before. I fixed one small problem and the code is now consistent whether I use floats or integers (i.e. values of $latex psi$ are the same whether the frequency is 3 or 3.0). But it still doesn't work, and moreover, $latex psi$ barely changes with frequency.

I think the best option will be to play with the Mathematica animation for a bit with different parameter ranges.

<a id="17Sep"></a>

<h1>Wednesday 17th September</h1>

Quick play around in Mathematica. Realised that the code is working but nothing much is really happening for the parameter range I chose -- the interesting stuff is going on at much lower frequencies!

This actually makes sense. The equation for $latex psi$ is going to produce sensible results if parameters like the length of the string around unity, but I have a canvas length of 640 pixels. So it was never going to be a great success!

<a id="18Sep"></a>

<h1>Thursday 18th September</h1>

Picked some parameters that make the interactivity nice --  the waves on the string change at a sensible rate as you adjust the frequency, not too rapidly or too irritatingly slowly.

The frequencies are currently annoyingly small numbers -- sure I can scale things better when my brain is working. But anyway, here is the current version:

[code lang=python]
&lt;br /&gt;## Standing wave demonstration with pygame

import pygame
import time
import math

# Window size
canvas_width = 640
canvas_height = 480

# Define colours
line_colour = pygame.Color(55, 115, 212, 0)
background_colour = pygame.Color(255, 255, 255, 0)
slider_colour = pygame.Color(0, 0, 0, 0)


# Make screen
screen = pygame.display.set_mode((canvas_width, canvas_height))
screen.fill(background_colour)

# Make drawing surface
surface = pygame.Surface((canvas_width, canvas_height)).convert()
surface.fill(background_colour)

# Define standing wave function

amplitude = 3 # in px
speed = 1

def k(n):
    return n*math.pi/canvas_width

def ysummand(x, n, frequency):
    return ((float(frequency)/speed)**2/n)*(1/(k(n)**2-(float(frequency)/speed)**2))*math.sin(k(n)*(float(x)))

def ysum(x, Nmax, frequency):
    sumList = [0]*Nmax
    for i in range(1, Nmax):
        sumList[i] = ysummand(x, i, frequency)

    return sum(sumList)

def y(x, frequency):
    return (2/math.pi)*amplitude*ysum(x, 10, frequency)

def psi(x, frequency):
    return y(x, frequency) + amplitude*(1 - (float(x)/float(canvas_width)))




pygame.init()

# Main loop
running = True

freq = 0.01 # set initial frequency

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Redraw background
    surface.fill(background_colour)

    for xrange in range(0, canvas_width):
    yrange = int((canvas_height/2) + psi(xrange, freq)*math.cos(1000*speed*freq*time.time()))
    for i in range(0, 4):
        surface.set_at((xrange, yrange + i), line_colour)

    # Display some text
    font = pygame.font.Font(None, 36)
    text = font.render(&quot;Frequency is &quot;+str(abs(freq)), 1, (10, 10, 10))
    textpos = text.get_rect()
    textpos.centerx = surface.get_rect().centerx
    surface.blit(text, textpos)

    move_ticker = 0
    keys=pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        if move_ticker == 0:
            move_ticker = 20
            freq -= 0.0001
    if keys[pygame.K_RIGHT]:
        if move_ticker == 0:   
            move_ticker = 20     
            freq += 0.0001




    # Add surface to screen
    screen.blit(surface, (0, 0))

    # Display 
    pygame.display.flip()



pygame.quit()


[/code]

Things I could/should still do include:

<ul>
<li>Adding a slider... or just moving straight to d3.js and trying to produce an interactive web page version</li>
<li>Scaling the equations nicely</li>
<li>(related) Working through the maths and understanding it properly.</li>
</ul>

But right now it's time to give this a rest for a week or two and switch focus. I have exciting paper corrections to make!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>103</wp:post_id>
  <wp:post_date>2014-09-18 17:55:37</wp:post_date>
  <wp:post_date_gmt>2014-09-18 17:55:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wot-i-dun-standing-waves-on-a-string-project</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="physics-visualisation"><![CDATA[physics visualisation]]></category>
  <category domain="post_tag" nicename="pygame"><![CDATA[Pygame]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
  <category domain="post_tag" nicename="standing-wave"><![CDATA[standing wave]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Wot I dun - Zyring project</title>
  <link>https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/</link>
  <pubDate>Tue, 14 Apr 2015 17:27:52 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=134</guid>
  <description/>
  <content:encoded><![CDATA[Right, I'm coming back to this blog with a new project. This time I'm going to try doing a structured project produced by a new startup called <a href="zyring.com">Zyring</a>, which I saw linked on Hacker News.

The idea of the Zyring site is to walk you through producing a first 'portfolio project' - some kind of web application like a blogging platform or news reader. Each step of the process still involves a good deal of learning and research, but the tutorials give some structure to stop you getting too lost and confused. If you've seen the posts on my other two projects on this blog, you may understand why this might sound appealing!

I picked the Apartment Finder project because I quite fancied playing around with the Google Maps API. My plan is to document this project relatively comprehensively as it could be helpful to other people who are either working through a Zyring project or evaluating whether to give it a go.

I'm making brief notes on each project tutorial as I go and will post these at intervals, but first off I thought I'd make an introductory post about my first impressions and general experience of working through the first few tutorials. Obviously, my opinions may change as I get further through the project...

If you can't be bothered to read all my waffle, here's my basic points that I'll expand on below:

<ol>
<li>I'm basically a big fan of the idea behind Zyring, and it's been something I've wanted for a while. First impressions are good, and the rest of my points are me being picky or sceptical about the implementation...</p></li>
<li><p>It could do with some clarity at the start on what the project is and who it's aimed at (though checking back, this has already improved since I signed up). I'd be surprised if complete beginners could get much out of this.</p></li>
<li><p>There are a hell of a lot of tools introduced, and I worry that it's overkill or that I won't really understand them properly. I won't really know until I've got further into the project.</p></li>
<li><p>Unsurprisingly for a new startup, some parts could do with polishing up. For example, there's loads of excellent documentation, but it isn't always brilliantly integrated with the tutorials.</p></li>
<li><p>For completeness I should point out that there's a facility for asking for help or code reviews, but I can't say anything helpful about it as I haven't tested that yet.</p></li>
</ol>

<h2>1. Bridging the gap</h2>

<p>Zyring's aim seems to be to bridge the gap between the 'getting started' level of tutorials like Codeacademy, and being able to start your own projects from scratch. This is something I can see a real need for, and I'm very grateful to anyone who is thinking about the problem. For context, here's a brief summary of my background: I did a physics PhD with a small amount of very basic coding in C and Mathematica, highly focussed on getting numbers out of whatever equation I was banging my head against that week. Afterwards I fancied learning some more immediately relevant programming skills, both as a fun project and with an eye on future employment (I'm not planning to stay in academia). I used Linux throughout and am relatively confident with the command line, and have got plenty of experience in learning new things on my own. On the other hand, I only had the vaguest idea about scripting languages like Python, had never done any web development, and had little idea where to start.

I've found Codeacademy excellent for learning basic syntax and commands but too constrained to allow the kind of exploratory work you need to do to really get your head around a topic. At this point, I know very well that the best way to learn something is to have a project that forces you to go out and learn for yourself... which is exactly what I tried next. See my previous blog posts here, particularly <a href="wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/">the one on map projections</a>, for excruciating details of my cack-handed attempts to figure things out on my own, often with no real idea even of which phrases to google to get help.

After a bit of this I got kind of bored (and had other work to be getting on with) and gave it a rest for a few months. The Hacker News post on Zyring provoked a bit of moaning on the lines of 'there's already too much hand-holding going on with all these new tutorials, people should just jump in and get on with it'. But I don't think the problem is really that <a href="http://www.gyford.com/phil/writing/2014/05/20/idiot.php">we're all idiots</a>.

(For another data point on this, here's the physicist John Baez <a href="https://johncarlosbaez.wordpress.com/2014/07/12/el-nino-project-part-5/">on trying to get started with R</a>, which I found reassuring. Anyone who's seen his incredible <a href="http://math.ucr.edu/home/baez/twfcontents.html">This Week's Finds in Mathematical Physics</a> series will know that the problem is <em>definitely</em> not that he's stupid...)

I think picking up a new skill is genuinely a lot harder than people remember, particularly when you're learning it on your own. I also don't think struggling to figure something out by yourself has any intrinsic moral value, and if you can find a more efficient way to learn something you should use it.

So now I've explained why I like the idea so much, I'll move on to a few thoughts and criticisms I have about Zyring in particular.

<h2>2. Who is the site for?</h2>

One thing that I don't think is made very clear at the moment is exactly who Zyring is aimed at and how it will teach you. I've just checked back to the landing page, and it is already a good deal clearer that when I signed up, so clearly this is going the right way. It now specifically says that it provides only 'high-level instructions' on how to build each feature, so you're less likely to sign up thinking everything will be explained to you in step-by-step detail.

But it won't hurt to give an extra warning here if you're a complete beginner thinking of starting a project. It's worth a try, but... good luck! If you've never used the command line or set up any kind of development environment, it is going to be a big challenge just to get things started.If you've never written any JavaScript or CSS, the tutorials are not going to spell things out line-by-line, Codeacademy style. (This isn't a complaint; it wouldn't be much of a project if they did. I just think it should be made clear.) You will need a <em>lot</em> of tenacity, and would probably be better off with another resource.

Another problem is that it is easy to be intimidated by...

<h2>3. The sheer range of stuff in the project</h2>

At the start of this project, you download a 'project scaffolding' - a rather bewildering number of files and folders, with references to a lot of tools and frameworks - Bower, Grunt, Angular, Bootstrap...

Zyring make it very clear that you don't need to know what everything is from the start, which I'm fine with - I'm happy with approaches that throw you in and allow you to learn as you go.

However, there is a <em>lot</em> of this stuff, which worries me. Zyring say that everything will be explained in later tutorials, which is a key claim as far as I'm concerned. I'm not expecting to come out with particularly high-level knowledge of all this stuff, but if I'm poking around the filesystem at the end of the project and half of it still looks like a bunch of magic beans then I will be disappointed.

I also think it's a little ambitious to have a project that promises to teach you all this stuff at once, which is why I'd appreciate more clarity on who the tutorials are aimed at. In my case, I have basic understanding of HTML, CSS and JavaScript, and have used Bootstrap a bit. Using a JavaScript framework like Angular is completely new to me, and something that I was interested in doing. I think it's reasonable to have one big new thing like that in a project, but putting a load of completely new tools together at once sounds like a recipe for extreme frustration. This could be a problem later in the project when I get on to more unfamiliar topics.

<h2>4. Good documentation, but a little rough around the edges</h2>

It's a new startup so it would be highly unfair to whine about this one too much, but it's probably worth pointing out that some of the material could do with some polish - I've spotted a few typos, and some of the explanations could do with sharpening up.

There's an impressively large range of specially-written documentation on all the different tools and frameworks, but it's currently not always particularly well integrated with the project tutorials themselves - they are linked to, but sometimes the linked section of the documentation has a very different name to that given in the link. For example, clicking on 'Using $scope in AngularJS' gives a link to a page that says 'What is two-way binding and how is it done in angularJS?' which is irritating when you open up a bunch of tabs at once and then have no idea how they relate to what you want to know. Also a clear link to all the documentation at the top of the screen would be helpful, as sometimes you want to go back to a part linked in an earlier tutorial.

I don't want to make a big deal out of any of this as it is not really impacting on my ability to follow the project.

<h2>5. Code review and help</h2>

Finally, I should definitely point out that there are code review and help features to connect you to someone if you get stuck. Some of this seems to be focussed on the paid-for premium version, which is fair enough, but there also seems to be help available in the free version (don't know how they're planning to scale that...) I haven't tried making use of any of this yet so I have no idea what it's like.

<h2>Summary</h2>

I'm impressed so far, but the proof will be in how I get on with the rest of the project. In particular:

<ul>
<li>Can I get through each tutorial using the instructions without getting too frustrated?</li>
<li>Will I actually understand what I'm doing by the end, or will it be a copy-and-pasted mess of incoherent tools and frameworks?</li>
</ul>

I'm documenting my experiences with each section of the project, so if you really want to read more of my ramblings there will be plenty more up soon...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>134</wp:post_id>
  <wp:post_date>2015-04-14 17:27:52</wp:post_date>
  <wp:post_date_gmt>2015-04-14 17:27:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wot-i-dun-zyring-project</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 1 - getting started</title>
  <link>https://wotidun.wordpress.com/2015/04/15/zyring-day-1-getting-started/</link>
  <pubDate>Wed, 15 Apr 2015 12:48:22 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=146</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Setting up my development environment</h2>

This involved installing Node.js - this took me a couple of goes as I didn't read the list of prerequisites properly and didn't have g++ installed. Overall not too much hassle, though I think this step would be highly intimidating for a beginner not used to installing packages from the command line.

I think it's sensible that they added the 'What To Expect' section ('Setting up a development environment is one of the most difficult and frustrating tasks that one faces as a software engineer'), but it's at the bottom of the page so I only read it after I'd managed to install everything.

Next up, I installed <code>grunt</code> and <code>bower</code> using the instructions (apparently I don't really need to know what these are right now). This used the package manager <code>npm</code>. The first time, this came up with a bunch of errors including some 'permission denied' stuff, so I added <code>sudo</code> at the beginning even though that was only in the Mac version instructions. This appears to have worked.

I also had to install <code>git</code> as it is not included in my version of Linux Mint... so that part of the instructions is not just for Windows.

<h2>Bringing up my website</h2>

OK, so in this part I should find out a bit more about what <code>grunt</code> and <code>bower</code> do.

First I ran the command <code>npm install</code>, which installs all the libraries that my tools require to work. This took ages, so I have plenty of time to stare at the ominous advice: 'In case of any errors during the execution of this command, read the error messages and try to look for a solution by Googling the errors. If you have no idea how to tackle the errors, use the discussion board or the help button on the top right of the screen to get assistance'.

As it happened, I got nothing scarier than a couple of warnings. Although Dropbox started ranting about 'cannot monitor the filesystem', which from googling looks fixable. No problems with <code>bower install</code>.

The next step is supposed to bring up a browser window with my amazing website on it! Unfortunately, I got <a href="https://github.com/gruntjs/grunt-contrib-watch/issues/236">this Warning: watch ENOSPC" problem</a> instead.

This also seems to be related to the Dropbox issue. In hindsight, it was probably a bit stupid to put the project into Dropbox as I'm only planning to use the files on this development machine where I've installed all the relevant stuff.
I just tend stick everything there by default.

I may move everything out of Dropbox next and hope nothing breaks. Anyway, at this point I've kind of had enough for one morning and so have a break.

<em>Later</em>: moved the folder out of Dropbox and ran <code>grunt serve</code> again. Success!

<h2>How to use Zyring</h2>

This section just has some bumf to read about what Zyring is.

<h2>Communicating with Controllers</h2>

To start, there's some information on the Model-View-Controller pattern.

This is the first step where I start adding to the project. First I did the easy bit: finding images of the six cities given and adding them to the Images file. For most of these there are multiple cities with the same name, but I'm going to guess that in each case I want the one near Seattle.

Then it's time to write some actual JavaScript. First I have to add some data with the names of the cities and their image URLS to the controller. I kind of bodge that but get on to the next lesson anyway where I work out the syntax and fix it...

<h2>Displaying a List of Cities</h2>

Here I update the HTML for my main page, displaying the names of each city with the image below. These are taken from the data stored in the controller, using <code>ng-repeat</code> as suggested.

After a bit of trial, error, reading the help given, and more error, I get something working. This produces a list of big pictures of the cities with their names above them. I don't make any effort to make this look pretty, since I can see the next lesson is about styling with Bootstrap anyway. I think I'll leave it here for today!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>146</wp:post_id>
  <wp:post_date>2015-04-15 12:48:22</wp:post_date>
  <wp:post_date_gmt>2015-04-15 12:48:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-1-getting-started</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 2 - styling  with Bootstrap</title>
  <link>https://wotidun.wordpress.com/2015/04/15/zyring-day-2-styling-with-bootstrap/</link>
  <pubDate>Wed, 15 Apr 2015 12:59:01 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=149</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Styling Your Cities Page</h2>

There's not much instruction given here, but I've played with CSS and Bootstrap a little bit before and am happy to just start mucking around. I generally enjoy thinking about design and layout and spent plenty of time messing around making posters in LaTeX or vector graphics in Inkscape during my PhD.

I'm going to aim for a simple layout a bit like this:

[caption id="attachment_159" align="alignnone" width="1024"]<a href="https://wotidun.files.wordpress.com/2015/04/2015-04-15-13-50-57.jpg"><img class="wp-image-159 size-large" src="https://wotidun.files.wordpress.com/2015/04/2015-04-15-13-50-57.jpg?w=1024" alt="rubbish sketch of page" width="1024" height="768" /></a> High quality mockup of my page[/caption]

So first I need to make a 3x2 grid, which I know how to do if I was going to manually specify what goes in each box. However, in this case what I really want to do is just populate it automatically with stuff from the controller, keeping it in three columns. This took me a while to figure out - I used this <a href="http://stackoverflow.com/questions/20137496/angular-js-ng-repeat-for-creating-grid">StackOverflow question</a> for guidance, but that initially caused me to overcomplicate things a bit.

Anyway once I got that working it was down to playing with styling -- this took me ages as I'm still quite new to it, but it wasn't hard to google for relevant tutorials for things like <a href="https://css-tricks.com/text-blocks-over-image/">adding a darker background to the city names</a> to make them more readable.

What I ended up with wasn't great and needs to be fitted to the screen better, but it'll do as a start - I don't want to spend forever on styling right now as I'm keen to get into the mechanics of the site.

[caption id="attachment_152" align="alignnone" width="1024"]<a href="https://wotidun.files.wordpress.com/2015/04/website_screenshot.png"><img class="wp-image-152 size-large" src="https://wotidun.files.wordpress.com/2015/04/website_screenshot.png?w=1024" alt="website screenshot" width="1024" height="576" /></a> Well,  it's a step up from the hand-drawn one...[/caption]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>149</wp:post_id>
  <wp:post_date>2015-04-15 12:59:01</wp:post_date>
  <wp:post_date_gmt>2015-04-15 12:59:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-2-styling-with-bootstrap</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
  <category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>website_screenshot</title>
  <link>https://wotidun.wordpress.com/2015/04/15/zyring-day-2-styling-with-bootstrap/website_screenshot/#main</link>
  <pubDate>Wed, 15 Apr 2015 12:54:13 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/website_screenshot.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Well, at least it's a step up from the hand-drawn one...]]></excerpt:encoded>
  <wp:post_id>152</wp:post_id>
  <wp:post_date>2015-04-15 12:54:13</wp:post_date>
  <wp:post_date_gmt>2015-04-15 12:54:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>website_screenshot</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>149</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/website_screenshot.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[website screenshot]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 3 - adding views and controllers, and getting confused</title>
  <link>https://wotidun.wordpress.com/2015/04/15/zyring-day-3-adding-views-and-controllers-and-getting-confused/</link>
  <pubDate>Wed, 15 Apr 2015 13:04:54 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=156</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Creating a new view and controller</h2>

I found this tutorial confusing and would have appreciated a little more guidance in exactly I was supposed to do. Of course, I'm expecting to struggle more with the Angular parts as it is new to me, but I'm not sure that was the whole problem. As far as I can make out I was supposed to create some kind of new view and controller, but it wasn't very clear what they should do. I interpreted the task as making a view and controller for each city. I had no idea how to automate this, so I manually created an html page for each city (which currently just says 'BANANAS!!!') and a corresponding controller, and then individually linked each controller on the index.html page.

This worked, in that clicking on Seattle or whatever took me to an exciting 'BANANAS!!!' page, but it's not really very clever. It looks like the next tutorial will explain how to do things properly.

Nothing else to report for Day 3 though as I spent most of it writing the big old intro post.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>156</wp:post_id>
  <wp:post_date>2015-04-15 13:04:54</wp:post_date>
  <wp:post_date_gmt>2015-04-15 13:04:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-3-adding-views-and-controllers-and-getting-confused</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="bananas"><![CDATA[BANANAS!!!]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2015-04-15 13.50.57</title>
  <link>https://wotidun.wordpress.com/2015/04/15/zyring-day-2-styling-with-bootstrap/2015-04-15-13-50-57/#main</link>
  <pubDate>Wed, 15 Apr 2015 14:32:34 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/2015-04-15-13-50-57.jpg</guid>
  <description/>
  <content:encoded><![CDATA[High-quality mockup of my page]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>159</wp:post_id>
  <wp:post_date>2015-04-15 14:32:34</wp:post_date>
  <wp:post_date_gmt>2015-04-15 14:32:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2015-04-15-13-50-57</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>149</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/2015-04-15-13-50-57.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[rubbish sketch of page]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 4 - fun with routing</title>
  <link>https://wotidun.wordpress.com/2015/04/19/zyring-day-4-fun-with-routing/</link>
  <pubDate>Sun, 19 Apr 2015 18:23:34 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=165</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

Today's tutorial successfully unconfused me on a variety of things. It took me <em>ages</em> to figure out, but I was happy when I got there and finally started to understand some basic things about Angular. The key for me was the <a href="https://zyring.com/#/tracks/frontend/prereq/angular#angularhash">'How do views get displayed in Angular?'</a> part of the help documentation, which gives more of a high-level overview of what's going on.

The idea for this tutorial is to be able to click on each city and go to some information for it. However, AngularJS is a single page application framework which loads a single HTML page once. So when we navigate to, say, the Seattle page, instead of loading a completely new page we just swap to another view. Also, there's no need to have a separate view and controller for each city - we want to make generic ones (which I called <code>cities.js</code> and <code>cities.html</code>), and then parametrise the URLs so there is a separate page for each city.

At this point I was starting to lose track of how all these javascript and html files related to other, so I decided to draw some pictures. Here's the file tree with all the bits I've been using so far included. There's <code>index.html</code>, <code>app.js</code>, and one example view and controller, <code>example.html</code> and <code>example.js</code>.

[caption id="attachment_168" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/04/files_tree1.jpg"><img class="size-large wp-image-168" src="https://wotidun.files.wordpress.com/2015/04/files_tree1.jpg?w=660" alt="File tree with an example view and controller." width="660" height="495" /></a> File tree with an example view and controller.[/caption]

And here's some notes on each one.

[caption id="attachment_169" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/04/files_diagram.jpg"><img class="size-large wp-image-169" src="https://wotidun.files.wordpress.com/2015/04/files_diagram.jpg?w=660" alt="File tree again with notes on each file added" width="660" height="495" /></a> File tree again with notes on each file added[/caption]

I haven't added anything on parametrising URLs yet, may put up a further picture at some point when I understand it better.

Now I had the diagrams, it was easier to keep in my head what was what. First I had to edit <code>app.js</code> to route to the page for each city using the parametrised URLs. My next task was to retrieve the city name stored in $routeParams and display it in the HTML view as the title for the page (instead of my previous standby, 'BANANAS!!!'). This caused me a load more confusion but I got there in the end.

At this point I found <a href="http://viralpatel.net/blogs/angularjs-routing-and-views-tutorial-with-example/">this tutorial on routing</a> helpful (the one linked to in the Zyring documentation was a video tutorial, which I never get on with, and also required you to sign up to something).

After I succeeded with all this I was feeling pretty pleased with myself given my complete lack of familiarity with Angular.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>165</wp:post_id>
  <wp:post_date>2015-04-19 18:23:34</wp:post_date>
  <wp:post_date_gmt>2015-04-19 18:23:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-4-fun-with-routing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>files_tree</title>
  <link>https://wotidun.wordpress.com/2015/04/19/zyring-day-4-fun-with-routing/files_tree/#main</link>
  <pubDate>Sun, 19 Apr 2015 18:17:41 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/files_tree.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[File tree with an example view and controller.]]></excerpt:encoded>
  <wp:post_id>167</wp:post_id>
  <wp:post_date>2015-04-19 18:17:41</wp:post_date>
  <wp:post_date_gmt>2015-04-19 18:17:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>files_tree</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>165</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/files_tree.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[File tree with an example view and controller.]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>files_tree</title>
  <link>https://wotidun.wordpress.com/2015/04/19/zyring-day-4-fun-with-routing/files_tree-2/#main</link>
  <pubDate>Sun, 19 Apr 2015 18:19:27 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/files_tree1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[File tree with an example view and controller.]]></excerpt:encoded>
  <wp:post_id>168</wp:post_id>
  <wp:post_date>2015-04-19 18:19:27</wp:post_date>
  <wp:post_date_gmt>2015-04-19 18:19:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>files_tree-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>165</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/files_tree1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[File tree with an example view and controller.]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>files_diagram</title>
  <link>https://wotidun.wordpress.com/2015/04/19/zyring-day-4-fun-with-routing/files_diagram/#main</link>
  <pubDate>Sun, 19 Apr 2015 18:20:26 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/files_diagram.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[File tree again with notes on each file added]]></excerpt:encoded>
  <wp:post_id>169</wp:post_id>
  <wp:post_date>2015-04-19 18:20:26</wp:post_date>
  <wp:post_date_gmt>2015-04-19 18:20:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>files_diagram</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>165</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/files_diagram.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[File tree again with notes on each file added]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 5 - the backend server</title>
  <link>https://wotidun.wordpress.com/2015/04/19/zyring-day-5-the-backend-server/</link>
  <pubDate>Sun, 19 Apr 2015 18:26:38 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=170</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Get to know your backend server</h2>

This tutorial is more just a 'read-and-understand' job, which was a nice change of pace after yesterday. I'm introduced to the apartment data I'll be using, which is in a JSON file hosted on the backend server and has the obvious stuff like price, location, photo and description.

I also read a bit of stuff about the HTTP protocol.

<h2>Creating an Angular Factory</h2>

In this tutorial I started on the 'M' bit of MVC, making a new directory to put our model code in. This will be the bit of the code that connects to the backend. Inside this directory I put a javascript file containing something called a <em>factory</em>, which is some Angular jargon I currently know nothing about. As I don't really know what this is yet, I didn't know what to call the file, so currently it's <code>rename_me_later.js</code>. Then I stuck in an empty <code>factory()</code> method.

I'm hoping that this all makes more sense when used in context later, as with the 'Communicating with Controllers' tutorial which was also a bit abstract.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>170</wp:post_id>
  <wp:post_date>2015-04-19 18:26:38</wp:post_date>
  <wp:post_date_gmt>2015-04-19 18:26:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-5-the-backend-server</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 6 - something to do with the $resource function</title>
  <link>https://wotidun.wordpress.com/2015/04/21/zyring-day-6-something-to-do-with-the-resource-function/</link>
  <pubDate>Tue, 21 Apr 2015 14:28:22 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=177</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Using dependency injection in Angular</h2>

Hm, this one is still pretty abstract too. I'm apparently going to want to use something called the <code>$resource</code> function to connect with the backend server, and I want to refer to it using my factory defined in the previous tutorial. I'm still very unclear on what any of this stuff actually <em>is</em>, though, so hopefully things will start being connected up to the rest of the application soon.

<h2>Attaching a $resource to all apartments URL</h2>

Bit of a weird title, but this looks like what I was hoping for, a concrete connection to what I'm doing in the app. I connected up <code>$resource</code> to the backend server URL <code>spidey.zyring.com/cities</code> so I can use it to get apartment data. Still a bit confused about the connection to the previous tutorial on dependency injection, but hopefully I've got it right.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>177</wp:post_id>
  <wp:post_date>2015-04-21 14:28:22</wp:post_date>
  <wp:post_date_gmt>2015-04-21 14:28:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-6-something-to-do-with-the-resource-function</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 7 - displaying lists of apartments</title>
  <link>https://wotidun.wordpress.com/2015/04/21/zyring-day-7-displaying-lists-of-apartments/</link>
  <pubDate>Tue, 21 Apr 2015 14:36:07 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=179</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Getting a list of all apartments for a city</h2>

The aim of this tutorial was to retrieve the list of apartment data for each city and show it on the city page. This took me a little bit of time but there were no major problems, the instructions were clear. Just some syntax errors to fix and some reading up on <code>$resource</code>.

I now have some beautiful pages like this:

[caption id="attachment_183" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/04/redmond_screenshot.png"><img class="wp-image-183 size-large" src="https://wotidun.files.wordpress.com/2015/04/redmond_screenshot.png?w=660" alt="Screenshot for Redmond with a list of data" width="660" height="377" /></a> List of data for Redmond[/caption]

<h2>Display a list of all apartments in each city</h2>

Unsurprisingly, in the next tutorial I have to clean up this mess I've vomited onto the HTML file, and display it in a more useful format. This uses the <code>ng-repeat</code> command I met in an earlier tutorial.

First I made a simple list of apartment titles, just to check I knew what I was doing:

[code lang=js]
&lt;ul&gt;
    &lt;li&gt;{{apartment.title}}&lt;/li&gt;
&lt;/ul&gt;
[/code]

Then I had a think about what I'd actually want to display for each apartment. For a start, I went with:

<ul>
<li>title</li>
<li>thumbnail</li>
<li>floorplan</li>
<li>price</li>
<li>contact details</li>
<li>list of features</li>
</ul>

... basically everything except the location data, which I'll think about how to display when I get on to the map stuff later.

This mostly went ok, except I need to work out how to extract all the list of features properly. At the moment I'm just extracting the first four items on the list:

[code lang=js]
&lt;ul&gt;
    &lt;li&gt;{{apartment.features[n]}}&lt;/li&gt;
&lt;/ul&gt;
[/code]

This might be a better way to go anyway as the lists are quite long, but I still want to figure out how to extract all the items each time.

My pages now look like this:

[caption id="attachment_184" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/04/redmond_screenshot_2.png"><img class="size-large wp-image-184" src="https://wotidun.files.wordpress.com/2015/04/redmond_screenshot_2.png?w=660" alt="List of data for Redmond, tidied up" width="660" height="422" /></a> Much tidier.[/caption]

A definite improvement on last time.

After this I seem to have a choice of four different tutorials to tackle next! This will have to wait for a couple of days though.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>179</wp:post_id>
  <wp:post_date>2015-04-21 14:36:07</wp:post_date>
  <wp:post_date_gmt>2015-04-21 14:36:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-7-displaying-lists-of-apartments</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>redmond_screenshot</title>
  <link>https://wotidun.wordpress.com/2015/04/21/zyring-day-7-displaying-lists-of-apartments/redmond_screenshot/#main</link>
  <pubDate>Tue, 21 Apr 2015 14:33:38 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/redmond_screenshot.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>183</wp:post_id>
  <wp:post_date>2015-04-21 14:33:38</wp:post_date>
  <wp:post_date_gmt>2015-04-21 14:33:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>redmond_screenshot</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/redmond_screenshot.png</wp:attachment_url>
</item>
<item>
  <title>redmond_screenshot_2</title>
  <link>https://wotidun.wordpress.com/2015/04/21/zyring-day-7-displaying-lists-of-apartments/redmond_screenshot_2/#main</link>
  <pubDate>Tue, 21 Apr 2015 14:35:15 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/redmond_screenshot_2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Much tidier.]]></excerpt:encoded>
  <wp:post_id>184</wp:post_id>
  <wp:post_date>2015-04-21 14:35:15</wp:post_date>
  <wp:post_date_gmt>2015-04-21 14:35:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>redmond_screenshot_2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/redmond_screenshot_2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[List of data for Redmond, tidied up]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 8 - Google Maps time!</title>
  <link>https://wotidun.wordpress.com/2015/04/25/zyring-day-8-google-maps-time/</link>
  <pubDate>Sat, 25 Apr 2015 19:39:07 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=186</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Google Maps API key</h2>

Nice easy step here - obtain a key for the Google Maps API. OK, this was actually slightly more complicated than expected as Google's instructions appear to be out of date, and the actual process was a bit different... not too much of a challenge though.

<h2>Installing a Google Maps directive</h2>

Another setup-type tutorial here, though again somewhat confusing. The particular page of of documentation linked to was for something called the <a href="http://angular-ui.github.io/angular-google-maps/#!/api">Google Maps Asynchronous Loader</a>, but I don't know whether that is something to install on its own or as part of the <code>angular-google-maps</code> package. Anyway I just installed <code>angular-google-maps</code> with bower using the <a href="http://angular-ui.github.io/angular-google-maps/#!/use">instructions</a> on the Quickstart page. I originally didn't read the bit about not needing to update <code>index.html</code> manually but that didn't really matter, it was kind of useful to dig around the files and see where everything was saved anyway.

After that it was time to actually include some maps! Again, I followed the Quickstart instructions, using my API key from the previous step, and it went pretty smoothly - I now have a map (of Montreal) at the top of the page for each city.

[caption id="attachment_188" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/04/google_maps_screenshot.png"><img class="size-large wp-image-188" src="https://wotidun.files.wordpress.com/2015/04/google_maps_screenshot.png?w=660" alt="A map (of Montreal, not Olympia)" width="660" height="318" /></a> Not a map of Olympia.[/caption]

<h2>Centring Google Maps</h2>

This just involved moving the map from Montreal to Seattle. I was mildly surprised that Seattle is a good way north of Montreal, but other than that not much to report here.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>186</wp:post_id>
  <wp:post_date>2015-04-25 19:39:07</wp:post_date>
  <wp:post_date_gmt>2015-04-25 19:39:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-8-google-maps-time</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="google-maps"><![CDATA[Google Maps]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>google_maps_screenshot</title>
  <link>https://wotidun.wordpress.com/2015/04/25/zyring-day-8-google-maps-time/google_maps_screenshot/#main</link>
  <pubDate>Sat, 25 Apr 2015 19:36:04 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/google_maps_screenshot.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Not a map of Olympia.]]></excerpt:encoded>
  <wp:post_id>188</wp:post_id>
  <wp:post_date>2015-04-25 19:36:04</wp:post_date>
  <wp:post_date_gmt>2015-04-25 19:36:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>google_maps_screenshot</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>186</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/google_maps_screenshot.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[A map (of Montreal, not Olympia)]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 9 - more maps...</title>
  <link>https://wotidun.wordpress.com/2015/04/25/zyring-day-9-more-maps/</link>
  <pubDate>Sat, 25 Apr 2015 19:46:06 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=190</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Adding pins to Google Maps</h2>

Another straightforward one that does what it says on the tin, though I needed to view the example <a href="http://stackoverflow.com/questions/26374723/angular-google-maps-v2-0-1-markers-directive-label-will-not-display-when-hovered">here</a> to work out exactly how to do it. Now I have some markers on the map!

[caption id="attachment_192" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/04/screenshot_seattle_markers.png"><img class="size-large wp-image-192" src="https://wotidun.files.wordpress.com/2015/04/screenshot_seattle_markers.png?w=660" alt="Map of Seattle with markers to show apartment locations" width="660" height="291" /></a> Markers showing apartment locations[/caption]

The current map settings aren't ideal, though, because Tacoma and Olympia are off the map. For now I just zoom out a bit (zoom level 8 instead of 10). Now the Olympia markers are visible:

[caption id="attachment_193" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/04/screenshot_olympia_markers.png"><img class="size-large wp-image-193" src="https://wotidun.files.wordpress.com/2015/04/screenshot_olympia_markers.png?w=660" alt="Zoomed out to show Olympia" width="660" height="290" /></a> Zoomed out to show Olympia[/caption]

<h2>Add overlays to your pin</h2>

This time I'm adding windows that pop up when a marker is clicked on, with some information like a picture of the apartment and the price. This uses the <a href="http://angular-ui.github.io/angular-google-maps/#!/api">ui-gmap-windows</a> directive and is again pretty simple to set up.

[caption id="attachment_194" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/04/screenshot_marker_windows.png"><img class="size-large wp-image-194" src="https://wotidun.files.wordpress.com/2015/04/screenshot_marker_windows.png?w=660" alt="Map with pop-up description showing a photo and the price of each apartment" width="660" height="284" /></a> Now with pop-up descriptions[/caption]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>190</wp:post_id>
  <wp:post_date>2015-04-25 19:46:06</wp:post_date>
  <wp:post_date_gmt>2015-04-25 19:46:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-9-more-maps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="google-maps"><![CDATA[Google Maps]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>screenshot_seattle_markers</title>
  <link>https://wotidun.wordpress.com/2015/04/25/zyring-day-9-more-maps/screenshot_seattle_markers/#main</link>
  <pubDate>Sat, 25 Apr 2015 19:42:21 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/screenshot_seattle_markers.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Markers showing apartment locations]]></excerpt:encoded>
  <wp:post_id>192</wp:post_id>
  <wp:post_date>2015-04-25 19:42:21</wp:post_date>
  <wp:post_date_gmt>2015-04-25 19:42:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot_seattle_markers</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>190</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/screenshot_seattle_markers.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Map of Seattle with markers to show apartment locations]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>screenshot_olympia_markers</title>
  <link>https://wotidun.wordpress.com/2015/04/25/zyring-day-9-more-maps/screenshot_olympia_markers/#main</link>
  <pubDate>Sat, 25 Apr 2015 19:43:58 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/screenshot_olympia_markers.png</guid>
  <description/>
  <content:encoded><![CDATA[Map zoomed out to show Olympia]]></content:encoded>
  <excerpt:encoded><![CDATA[Zoomed out to show Olympia]]></excerpt:encoded>
  <wp:post_id>193</wp:post_id>
  <wp:post_date>2015-04-25 19:43:58</wp:post_date>
  <wp:post_date_gmt>2015-04-25 19:43:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot_olympia_markers</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>190</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/screenshot_olympia_markers.png</wp:attachment_url>
</item>
<item>
  <title>screenshot_marker_windows</title>
  <link>https://wotidun.wordpress.com/2015/04/25/zyring-day-9-more-maps/screenshot_marker_windows/#main</link>
  <pubDate>Sat, 25 Apr 2015 19:44:51 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/screenshot_marker_windows.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Now with pop-up descriptions]]></excerpt:encoded>
  <wp:post_id>194</wp:post_id>
  <wp:post_date>2015-04-25 19:44:51</wp:post_date>
  <wp:post_date_gmt>2015-04-25 19:44:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot_marker_windows</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>190</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/screenshot_marker_windows.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Map with pop-up description showing a photo and the price of each apartment]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 10 - Callback Tuesday</title>
  <link>https://wotidun.wordpress.com/2015/04/30/zyring-day-10-callback-tuesday/</link>
  <pubDate>Thu, 30 Apr 2015 17:45:59 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=196</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Divide apartments in a city into pages, part 1</h2>

This tutorial has a nice innocuous title but actually stumped me for ages. I spent all day on this but learnt some very useful stuff about JavaScript in the process (see later).

The idea of the tutorial is exactly what it says - divide up the list of apartments so that instead of vomiting a hundred or so apartments onto one page, it splits them into more user-friendly batches of 9. This also allows faster loading speeds and a less cluttered map. Seems reasonable.

The tutorial goes into very thorough detail on the process of how to split an array of data into sub-arrays. I think I could have worked this out OK on my own but I'm not complaining. The problem I had was how to adapt this method for getting my array from the backend server instead of one I've got saved in my current file. First I needed to understand a bit more about  <code>$resource</code> and its <code>query</code> method, as I'd copied it in kind of mindlessly. I read some of the information on the previously linked (and very useful) tutorial on <a href="http://www.sitepoint.com/creating-crud-app-minutes-angulars-resource/">creating a CRUD app</a>, and got my head around the syntax a bit better.

However, I was still confused: I tried printing my <code>query({cityName: $routeParams.cityName})</code> to <code>console.log</code> and it was coming up empty. However, I'd used this in the previous tutorial and it definitely had some data stored in it. This looks like some kind of asynchronous thingy (to use the technical term).

:( Time for some research.

<h2>Callback Tuesdays</h2>

At this point I should admit that I've been treating JavaScript as some version of Python, except it has the wrong syntax and runs in the browser. This approach was starting to fall apart a little...

I looked at Zyring's own documentation on the <code>$resource</code> service and read the sentence

<blockquote>
  "If you like to be notified exactly when the results become available, you can pass in a function callback to the get and query methods"
</blockquote>

I realised I didn't really know what a callback is, and that I probably should if I was going to do anything time-dependent. Luckily when I googled it there were several decent introductions. I ended up playing with some examples based on this <a href="http://www.impressivewebs.com/callback-functions-javascript/">nice tutorial</a> and <a href="http://jsbin.com/ozuloq/1/edit?html,js,output">runnable example</a>. Below are my notes on this for future reference.

Their example is something like:

[code lang=js]
function mySandwich(param1, param2, callback) {
    console.log(&#039;Started eating my sandwich.nIt has &#039; + param1 + &#039; and &#039; + param2 + &#039; in it.&#039;);
    callback();
}

mySandwich(&#039;ham&#039;, &#039;cheese&#039;, function() {
    console.log(&#039;Finished eating my sandwich.&#039;);
});
[/code]

This produces:

<blockquote>
  "Started eating my sandwich.
  It has ham and cheese in it."
  "Finished eating my sandwich."
</blockquote>

We have freedom to change the function:

[code lang=text]
mySandwich(&#039;tuna&#039;, &#039;banana&#039;, function() {
    console.log(&#039;Bleeeurgh...&#039;);
});
[/code]

This gives

<blockquote>
  "Started eating my sandwich.
  It has tuna and banana in it."
  "Bleeeurgh..."
</blockquote>

Or here's an example with a callback function with a parameter:

[code lang=text]
&lt;br /&gt;function anotherSandwich(param1, param2, callback) {
    console.log(&#039;Time for another sandwich.nnIt has &#039; + param1 + &#039; and &#039; + param2 + &#039; in it.&#039;);
    callback(param2);
}

anotherSandwich(&#039;ham&#039;, &#039;mustard&#039;, function(param) {
  console.log(&#039;Shame I hate &#039; + param + &#039;.&#039;);
});
[/code]

which gives

<blockquote>
  "Time for another sandwich.
  It has ham and mustard in it."
  "Shame I hate mustard."
</blockquote>

<h2>Divide apartments in a city into pages, part 1</h2>

So this gave me some basic idea about callbacks, including the idea that I might want to implement my pagination algorithm in a function callback to <code>$resource.query</code>, so that the array has been fetched from the server before I start doing anything with it. I don't know if this is the 'proper' way to do it, but it worked anyway.

Finally, writing the pagination algorithm based on the example went pretty smoothly, and I had my big array of apartment data split into a bunch of smaller arrays. I wasn't whether I was supposed to do anything else with it right now, like connect it up to the html file somehow, but I thought I'd keep going and see what the later tutorials said... I can always go back if necessary.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>196</wp:post_id>
  <wp:post_date>2015-04-30 17:45:59</wp:post_date>
  <wp:post_date_gmt>2015-04-30 17:45:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-10-callback-tuesday</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 11 - UI controls for my pages</title>
  <link>https://wotidun.wordpress.com/2015/04/30/zyring-day-11-ui-controls-for-my-pages/</link>
  <pubDate>Thu, 30 Apr 2015 17:52:00 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=199</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Add a pager UI elements</h2>

Oddly phrased title, but this tutorial involves adding some UI controls for the pagination I did in the last tutorial - the usual "Previous | 1 | 2 | 3 | Next" type stuff. This can be done through an external library, <a href="http://angular-ui.github.io/bootstrap/#/top">Angular UI Bootstrap</a>, which I install through <code>bower</code>.

That goes ok, but then I forget to add the dependency to my <code>app.js</code> file and don't figure out what the problem is for ages... I can see this becoming a theme. Even after this I get some errors, and discover I've loaded the wrong version of the library through <code>bower</code>: I need to install 'angular-bootstrap' rather than <code>ui.bootstrap</code>.

Once again, Stack Overflow <a href="http://stackoverflow.com/questions/22178753/adding-ui-bootstrap-dependency-with-bower">comes to the rescue</a>. After this, I have a nice bar of page numbers to click on:
[caption id="attachment_200" align="alignnone" width="300"]<a href="https://wotidun.files.wordpress.com/2015/04/pagination_ui.png"><img class="size-medium wp-image-200" src="https://wotidun.files.wordpress.com/2015/04/pagination_ui.png?w=300" alt="UI element for changing pages" width="300" height="192" /></a> UI element for changing pages[/caption]

Of course, it doesn't actually <em>do</em> anything, yet, but it looks like that'll be the next tutorial...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>199</wp:post_id>
  <wp:post_date>2015-04-30 17:52:00</wp:post_date>
  <wp:post_date_gmt>2015-04-30 17:52:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-11-ui-controls-for-my-pages</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[67112767]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>pagination_ui</title>
  <link>https://wotidun.wordpress.com/2015/04/30/zyring-day-11-ui-controls-for-my-pages/pagination_ui/#main</link>
  <pubDate>Thu, 30 Apr 2015 17:48:33 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/04/pagination_ui.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[UI element for changing pages]]></excerpt:encoded>
  <wp:post_id>200</wp:post_id>
  <wp:post_date>2015-04-30 17:48:33</wp:post_date>
  <wp:post_date_gmt>2015-04-30 17:48:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pagination_ui</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>199</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/04/pagination_ui.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[UI element for changing pages]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 12 - notes from ages ago...</title>
  <link>https://wotidun.wordpress.com/2015/05/27/zyring-day-12-notes-from-ages-ago/</link>
  <pubDate>Wed, 27 May 2015 12:37:40 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=204</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

So there's been a pretty long break in these blog entries - I'm doing some marking for a local university and just got hit by a huge pile of engineering maths exam scripts. That's over now, and I don't want to see another Fourier series for a while. Here I'm just writing up a short note I found from before Marking Fest started.

<h2>Using the pager element to navigate</h2>

Now it's a case of wiring everything up so that the page selection UI actually does something, using <code>ng-repeat</code>. This took me a little while just to work out what's going on, but was not actually very complicated in the end. My main annoyance was introducing some kind of off-by-one error so that the first page of apartments was missed off. Need to fix this sometime...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>204</wp:post_id>
  <wp:post_date>2015-05-27 12:37:40</wp:post_date>
  <wp:post_date_gmt>2015-05-27 12:37:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-12-notes-from-ages-ago</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11061263298]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 13 - styling the list of apartments.</title>
  <link>https://wotidun.wordpress.com/2015/05/27/zyring-day-13-styling-the-list-of-apartments/</link>
  <pubDate>Wed, 27 May 2015 14:07:57 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=207</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Styling the Apartments List page</h2>

Strangely, I wasn't really enthralled by the prospect of figuring out the off-by-one error from the last tutorial I did three weeks ago, so I decided to ease myself back in by doing a relatively self-contained tutorial on styling. I don't want to spend ages on styling as it's really not the focus of what I want to learn right now, but I will at least implement a basic grid of apartments.

I follow the same basic approach as for styling the list of cities, and this is what I end up with:

[caption id="attachment_209" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/05/apartment_list_styling.png"><img class="size-large wp-image-209" src="https://wotidun.files.wordpress.com/2015/05/apartment_list_styling.png?w=660" alt="Basic styling for the list of apartments." width="660" height="427" /></a> Basic styling for the list of apartments.[/caption]

Not exciting, but it'll do for now.

I also decide I don't like the circles on the Cities page, so I go for 'beer mats' throughout:

[caption id="attachment_208" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/05/beermats.png"><img class="size-large wp-image-208" src="https://wotidun.files.wordpress.com/2015/05/beermats.png?w=660" alt="Images for cities now have rounded corners." width="660" height="360" /></a> I like beer.[/caption]

OK, this has hopefully got me back into the right mindset for this project.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>207</wp:post_id>
  <wp:post_date>2015-05-27 14:07:57</wp:post_date>
  <wp:post_date_gmt>2015-05-27 14:07:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-13-styling-the-list-of-apartments</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
  <category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11063664067]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>beermats</title>
  <link>https://wotidun.wordpress.com/2015/05/27/zyring-day-13-styling-the-list-of-apartments/beermats/#main</link>
  <pubDate>Wed, 27 May 2015 14:04:00 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/05/beermats.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[I like beer.]]></excerpt:encoded>
  <wp:post_id>208</wp:post_id>
  <wp:post_date>2015-05-27 14:04:00</wp:post_date>
  <wp:post_date_gmt>2015-05-27 14:04:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>beermats</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>207</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/05/beermats.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Images for cities now have rounded corners.]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>apartment_list_styling</title>
  <link>https://wotidun.wordpress.com/2015/05/27/zyring-day-13-styling-the-list-of-apartments/apartment_list_styling/#main</link>
  <pubDate>Wed, 27 May 2015 14:04:54 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/05/apartment_list_styling.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Basic styling for the list of apartments.]]></excerpt:encoded>
  <wp:post_id>209</wp:post_id>
  <wp:post_date>2015-05-27 14:04:54</wp:post_date>
  <wp:post_date_gmt>2015-05-27 14:04:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>apartment_list_styling</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>207</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/05/apartment_list_styling.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Basic styling for the list of apartments.]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>apartment_list_styling</title>
  <link>https://wotidun.wordpress.com/2015/05/27/zyring-day-13-styling-the-list-of-apartments/apartment_list_styling-2/#main</link>
  <pubDate>Wed, 27 May 2015 14:05:23 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/05/apartment_list_styling1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>210</wp:post_id>
  <wp:post_date>2015-05-27 14:05:23</wp:post_date>
  <wp:post_date_gmt>2015-05-27 14:05:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>apartment_list_styling-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>207</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/05/apartment_list_styling1.png</wp:attachment_url>
</item>
<item>
  <title>Zyring Day 14 - Masonry and responsive design.</title>
  <link>https://wotidun.wordpress.com/2015/06/01/zyring-day-14-masonry-and-responsive-design/</link>
  <pubDate>Mon, 01 Jun 2015 15:16:48 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=213</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Install Masonry library</h2>

In this tutorial, I install Masonry, a new directive that's supposed to take care of placing images that are different sizes. I'm not really sure I see the point of this, as all the apartment images seem to be thumbnail images of the same size. Maybe a previous version of the backend data had variable image sizes? Bigger images would also be nicer for styling the pages...

I dutifully install the library anyway, play around with it for a bit, then revert to my previous styling without Masonry. I'll keep the Masonry stuff commented out in case I need it for a later tutorial.

<h2>Make your 'All Apartments' page responsive</h2>

I.e., check it works OK for different screen sizes. This is actually fine straight off thanks to Bootstrap. If I'm being fussy, the map could do with being centred better, but I should probably muck around with the scaling on that in general some time. At the moment it is zoomed out on the whole Seattle area each time (to cover all six cities), but I should really zoom in on each one.

It was good to play around with the screen sizes in the Developer Tools though and see what it looks like on different phone and tablet screens, never used that before.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>213</wp:post_id>
  <wp:post_date>2015-06-01 15:16:48</wp:post_date>
  <wp:post_date_gmt>2015-06-01 15:16:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-14-masonry-and-responsive-design</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11227277873]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 15 - Making pages for each apartment</title>
  <link>https://wotidun.wordpress.com/2015/06/08/zyring-day-15-making-pages-for-each-apartment/</link>
  <pubDate>Mon, 08 Jun 2015 14:07:52 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=216</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Creating new pages for your apartments</h2>

This took me a while, as it was some time since I'd done the routing for the city pages. I had to create my new view (<code>apartments.html</code>), my new controller (<code>apartments.js</code>) and then sort out the routing in <code>app.js</code>. Then I made links from each apartment in the map and listings to the new page. Think I'm starting to get the hang of how routing works!

<h2>Backend endpoints for individual apartment API</h2>

Nice short tutorial, just having a look at what information the backend server has for each apartment (quite a lot, as it turns out).

<h2>Single apartment factory</h2>

This is an odd tutorial. The text looks unfinished, and says 'Similar to the previous step, create another factory for the last backend call inside the script you created.' I have no idea what step this is referring to. I decide to go for my standby method of just guessing what to do, and then hoping the next tutorial makes more sense...

My guess is that I need to wire things up to the backend server using the <code>$resource</code> object, as I did for the apartment lists for each city. After a lot of fiddling around trying to remember how to do this, I manage to dump all the apartment data into my view for each apartment:

[caption id="attachment_217" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/06/single_apartment_page.png"><img class="size-large wp-image-217" src="https://wotidun.files.wordpress.com/2015/06/single_apartment_page.png?w=660" alt="Data for the single apartment view." width="660" height="286" /></a> Data for the single apartment view.[/caption]

Not pretty. But it works!

<h2>Getting information for individual apartments</h2>

Hang on, turns out that the next tutorial is exactly what I just did. So I've now got <em>no idea</em> what the 'Single Apartment Factory' tutorial is about. Never mind, if it's important I'm sure I'll find out later. I'm also feeling quite smug that I figured out to use a <code>get</code> rather than <code>query</code> method by myself, with no help from the tutorial (it took me a while though).

Wow, there's only one tutorial left now (as well as going back and working out what my off-by-one problem with 'Using the pager element to navigate' is). Will leave this for another day, as I expect it will take some time to do all the styling and so on.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>216</wp:post_id>
  <wp:post_date>2015-06-08 14:07:52</wp:post_date>
  <wp:post_date_gmt>2015-06-08 14:07:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-15-making-pages-for-each-apartment</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11460334174]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>single_apartment_page</title>
  <link>https://wotidun.wordpress.com/2015/06/08/zyring-day-15-making-pages-for-each-apartment/single_apartment_page/#main</link>
  <pubDate>Mon, 08 Jun 2015 14:05:59 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/06/single_apartment_page.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Data for the single apartment view.]]></excerpt:encoded>
  <wp:post_id>217</wp:post_id>
  <wp:post_date>2015-06-08 14:05:59</wp:post_date>
  <wp:post_date_gmt>2015-06-08 14:05:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>single_apartment_page</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>216</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/06/single_apartment_page.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Data for the single apartment view.]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 16 - Carousel Fail</title>
  <link>https://wotidun.wordpress.com/2015/06/09/zyring-day-16-carousel-fail/</link>
  <pubDate>Tue, 09 Jun 2015 13:19:17 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=220</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Display information about a single apartment on a page</h2>

Thought this would be straightforward, but I ended up having a fairly frustrating day of getting things wrong. Annoying when I seem to be so close to the end...

I decided I wanted a layout like this (written on a blank page of a 'Libraries for the Future' consultation booklet because I didn't bring any paper with me):

[caption id="attachment_221" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/06/apartment_page_layout.jpg"><img class="size-large wp-image-221" src="https://wotidun.files.wordpress.com/2015/06/apartment_page_layout.jpg?w=660" alt="Layout for my apartment page" width="660" height="880" /></a> Layout for my apartment page[/caption]

Fairly basic, just a title, a big carousel of images, and a couple of lists of information.

First I was confused for quite a while about why no apartment images were being displayed. I thought that for some reason <code>get</code> wasn't fetching them, and spent a long time mucking about with callbacks (on the plus side, they started making a lot more sense). Then I realised that the problem was simply that there aren't any images on the server for most apartments, just an empty array. So I decided to start off just getting the view for the <a href="http://spidey.zyring.com/apartments/ci53gwdpa006m66lvl1abui8z">example data</a> to work properly, and then think about what to do for the pages without images later.

For the carousel I tried to use the Angular Bootstrap library. My blog came in handy there: I knew I'd used it before but couldn't remember what for, so the <a href="https://wotidun.wordpress.com/2015/04/30/zyring-day-11-ui-controls-for-my-pages/">relevant post</a> was useful. I managed to include a carousel, but the arrows weren't working properly. I think it probably has something to do with <a href="http://stackoverflow.com/questions/22641834/angularjs-corousel-stops-working">this problem</a>, but by now I'm happy to give this a rest for a while.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>220</wp:post_id>
  <wp:post_date>2015-06-09 13:19:17</wp:post_date>
  <wp:post_date_gmt>2015-06-09 13:19:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-16-carousel-fail</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11494033078]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>apartment_page_layout</title>
  <link>https://wotidun.wordpress.com/2015/06/09/zyring-day-16-carousel-fail/apartment_page_layout/#main</link>
  <pubDate>Tue, 09 Jun 2015 13:17:35 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/06/apartment_page_layout.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Layout for my apartment page]]></excerpt:encoded>
  <wp:post_id>221</wp:post_id>
  <wp:post_date>2015-06-09 13:17:35</wp:post_date>
  <wp:post_date_gmt>2015-06-09 13:17:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>apartment_page_layout</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>220</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/06/apartment_page_layout.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Layout for my apartment page]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 17 - Carousel Success</title>
  <link>https://wotidun.wordpress.com/2015/06/10/zyring-day-17-carousel-success/</link>
  <pubDate>Wed, 10 Jun 2015 12:28:33 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=223</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Display information about a single apartment on a page (continued)</h2>

Boom! Used <code>simonykq</code>'s solution on this <a href="https://github.com/angular-ui/bootstrap/issues/1350">thread</a> and it worked beautifully. Nice to start the day with something working immediately.

I then ran into another issue that needed fixing - a problem with duplicate items in lists when using <code>ng-repeat</code>. This could <a href="https://docs.angularjs.org/error/ngRepeat/dupes">be fixed</a> by using the <code>track by $index</code> option, tracking by an object's position in an array rather than its value. I'd seen this error come up before, nice to understand it!

OK, finally time to style the information a bit. I get as far as this:

[caption id="attachment_224" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/06/abbey_rowe.png"><img class="size-large wp-image-224" src="https://wotidun.files.wordpress.com/2015/06/abbey_rowe.png?w=660" alt="Example apartment listing." width="660" height="563" /></a> Example apartment listing.[/caption]

Next time I plan to make this a bit fancier and more consistent with the styling of the previous pages. And hopefully find that off-by-one error... very close to finishing now!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>223</wp:post_id>
  <wp:post_date>2015-06-10 12:28:33</wp:post_date>
  <wp:post_date_gmt>2015-06-10 12:28:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-17-carousel-success</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11527488891]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>abbey_rowe</title>
  <link>https://wotidun.wordpress.com/2015/06/10/zyring-day-17-carousel-success/abbey_rowe/#main</link>
  <pubDate>Wed, 10 Jun 2015 12:25:06 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/06/abbey_rowe.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Example apartment listing.]]></excerpt:encoded>
  <wp:post_id>224</wp:post_id>
  <wp:post_date>2015-06-10 12:25:06</wp:post_date>
  <wp:post_date_gmt>2015-06-10 12:25:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>abbey_rowe</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>223</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/06/abbey_rowe.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Example apartment listing.]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 18 - Off By One Day</title>
  <link>https://wotidun.wordpress.com/2015/06/12/zyring-day-18-off-by-one-day/</link>
  <pubDate>Fri, 12 Jun 2015 13:52:34 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=234</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Using the pager element to navigate (cont'd)</h2>

OK, I'm awake, reasonably alert, and well-fortified by the supermarket garlic naan I ate cold out of the bag on a bench in the shopping centre. Apparently this is not what the well-dressed ladies of Clifton generally do for breakfast, or so I gather from the odd looks, but hopefully it's helped put me in the right frame of mind for going back and looking at the off-by-one error I had <a href="https://wotidun.wordpress.com/2015/05/27/zyring-day-12-notes-from-ages-ago/">weeks ago</a>.

First, let's work out exactly what the problem is. Take Seattle as an example. There are 165 apartments listed, so that should make 18 pages of 9 apartments plus a 19th page with 3 apartments. Looking at the backend data, the first apartment on each page should be:

Page 1: Avalon Kirkland
Page 2: Kerry Park Apartments
Page 3: Lexicon
...
Page 17: The Dakota at Rainier Court
Page 18: The Century
Page 19: Alcyone

However what's actually happening is this:

<ul>
<li>On first loading <code>cities/Seattle</code>, I get Avalon Kirkland as expected.</li>
<li>But if I now click on page 2, I get Lexicon which should be page 3...</li>
<li>...and if I click back to 1 I get Kerry Park Apartments. :(</li>
<li>Also, the list of pages only goes up to 17, The Dakota. The pages above that are just not displayed.</li>
</ul>

Same stuff if I click on 'Next' and 'Previous' instead of the page numbers. So I'm initialising it correctly, which makes sense as I'm explicitly setting <code>$scope.currentPage = 0;</code>, but then it's off by one after that. Not sure what's going on with the last pages missing.

Looking at the <a href="https://angular-ui.github.io/bootstrap/">AngularUI Bootstrap documentation</a>, I see that <code>ng-model</code> expects the first page to be 1, whereas mine start at 0, so that is one of the problems, so I fix that. After fixing this Avalon Kirkland is consistently the first page as expected, which is good, but I now have a "TypeError: Cannot read property 'push' of undefined" message, and the pager element loads stuck on page 17, which is still the last page. So I've fixed one thing and now something else is broken - progress of a sort.

OK, now I'm having a look at the array of pages <code>$scope.pages</code>. It looks OK before I push any information into it, but then there's a problem. It should look like <code>[Array[9], Array[9], Array[9],...]</code> but instead there's an <code>Array[0]</code> at the beginning. Bummer. This might explain why I'm getting the 'TypeError' message, though, as there isn't enough space in the array for everything I want to push to it, so I'm making progress.

Indeed, I find my <code>while</code> loop goes one too high, and I get rid of the TypeError problem and the carousel loads at the first page with Avalon Kirkland as expected. STILL having the problem with the highest pages missing though.

Let's look at all the cities...

<ul>
<li>Seattle: 165 apartments, should be 19 pages, displaying 17, out by -2</li>
<li>Redmond: 65 apartments, should be 8 pages, displaying 7, out by -1</li>
<li>Bellevue: 164 apartments, should be 19 pages, displaying 17, out by -2</li>
<li>Kirkland: 172 apartments, should be 20 pages, displaying 18, out by -2</li>
<li>Tacoma: 141 apartments, should be 16 pages, displaying 15, out by -1</li>
<li>Olympia: 52 apartments, should be 6 pages, displaying 6, correct</li>
</ul>

So it seems to be more wrong the larger the number of apartments, but why is not obvious to me.

I also find another problem, possibly related. When I click on some apartments, the data doesn't load. Instead I get an empty page like this:

[caption id="attachment_236" align="alignnone" width="660"]<a href="https://wotidun.files.wordpress.com/2015/06/empty_page.png"><img class="size-large wp-image-236" src="https://wotidun.files.wordpress.com/2015/06/empty_page.png?w=660" alt="Page with no data loaded" width="660" height="282" /></a> Not very helpful[/caption]

This happens only with apartments on later pages.

I fiddle about with this all day but cannot work out what the problem is. It might finally be time to ask for help... but I want to finish off the remaining bits of styling first.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>234</wp:post_id>
  <wp:post_date>2015-06-12 13:52:34</wp:post_date>
  <wp:post_date_gmt>2015-06-12 13:52:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-18-off-by-one-day</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11599714278]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>empty_page</title>
  <link>https://wotidun.wordpress.com/2015/06/12/zyring-day-18-off-by-one-day/empty_page/#main</link>
  <pubDate>Fri, 12 Jun 2015 13:50:54 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/06/empty_page.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Not very helpful]]></excerpt:encoded>
  <wp:post_id>236</wp:post_id>
  <wp:post_date>2015-06-12 13:50:54</wp:post_date>
  <wp:post_date_gmt>2015-06-12 13:50:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>empty_page</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>234</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/06/empty_page.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Page with no data loaded]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Zyring Day 19 - Tidying up</title>
  <link>https://wotidun.wordpress.com/2015/06/12/zyring-day-19-tidying-up/</link>
  <pubDate>Fri, 12 Jun 2015 13:59:35 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=238</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Note: These are more in-depth (read: tedious) write-ups of my experience with each section of the Zyring project, leading on from my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">intro post</a> on Zyring. This is mostly for my own benefit but could conceivably be of use to someone doing the project.]</em>

<h2>Display information about a single apartment on a page (continued)</h2>

Time for a final bit of styling of the indivdual apartments. I added a grey background to the apartment title to be consistent with the styling list of apartments, and did a few other small changes. Again, I don't want to spend huge amounts of time on styling for this project, that isn't the focus for me.

I ended up with this:

[caption id="attachment_239" align="alignnone" width="607"]<a href="https://wotidun.files.wordpress.com/2015/06/theas_landing.png"><img class="size-full wp-image-239" src="https://wotidun.files.wordpress.com/2015/06/theas_landing.png" alt="Grey background to the title for consistency." width="607" height="641" /></a> Grey background to the title for consistency.[/caption]

<h2>Pedantry</h2>

Woohoo! Everything's done now apart from the <a href="https://wotidun.wordpress.com/2015/06/12/zyring-day-18-off-by-one-day/">page navigation problem from yesterday</a> that I'm going to have to ask about. Now to tidy up a bit... fixing problems, with indentation, comments, adding some <code>ngdocs</code> documentation and renaming my two Angular factories to more informative names. Also cleaned up my mess of a CSS file a bit using tips from <a href="http://code.tutsplus.com/tutorials/30-css-best-practices-for-beginners--net-6741">this tutorial.</a>

<h2>Things I could add</h2>

That's where I'm leaving it for now (apart from the page navigation problem), but I may as well list a few minor annoyances I'd like to fix if I feel like it later:

<ul>
<li>Map displays same area each time: would like to focus in on particular areas</li>
<li>Maybe have a map on individual apartment pages as well</li>
<li>Add navigation to go back to list of apartments from an individual apartments page</li>
<li>Currently if I do this by clicking 'Back', it always takes me to page 1 of the list of apartments rather than the one I was on</li>
<li>Carousel only works with mouse, not left and right arrow keys</li>
<li>Would be good to show the apartment thumbnail for apartments where there are no other images on the backend server</li>
<li>Write something more helpful in the 'About' view</li>
</ul>

&nbsp;

<h2>Finally...</h2>

I still need to write a big old post summarising how I found the project. Coming soon...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>238</wp:post_id>
  <wp:post_date>2015-06-12 13:59:35</wp:post_date>
  <wp:post_date_gmt>2015-06-12 13:59:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>zyring-day-19-tidying-up</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11599903762]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>theas_landing</title>
  <link>https://wotidun.wordpress.com/2015/06/12/zyring-day-19-tidying-up/theas_landing/#main</link>
  <pubDate>Fri, 12 Jun 2015 13:56:59 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/06/theas_landing.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Grey background to the title for consistency.]]></excerpt:encoded>
  <wp:post_id>239</wp:post_id>
  <wp:post_date>2015-06-12 13:56:59</wp:post_date>
  <wp:post_date_gmt>2015-06-12 13:56:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>theas_landing</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>238</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/06/theas_landing.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Grey background to the title for consistency.]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>I dun it! Zyring project summary...</title>
  <link>https://wotidun.wordpress.com/2015/06/15/i-dun-it-zyring-project-summary/</link>
  <pubDate>Mon, 15 Jun 2015 19:50:14 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">https://wotidun.wordpress.com/?p=243</guid>
  <description/>
  <content:encoded><![CDATA[Well, after a lot of blogging, coding, gawping at the console, googling obscure errors and swearing at my laptop, I've finally (almost) finished the Zyring Apartment Finder project! Normally I find American startups go a bit overboard on the "WOO! AWESOME JOB!" every time you fill in a text box or whatever, but this time after finishing this ~40 hour project I got this:

[caption id="attachment_244" align="alignnone" width="196"]<a href="https://wotidun.files.wordpress.com/2015/06/congratulations.png"><img class="size-full wp-image-244" src="https://wotidun.files.wordpress.com/2015/06/congratulations.png" alt="The rather low-key end of the project." width="196" height="229" /></a> CONGRATULATIONS!!! PARTY TIME!!![/caption]

That's a bit low-key even for my British tastes.

Anyway, it's now time to look back on my <a href="https://wotidun.wordpress.com/2015/04/14/wot-i-dun-zyring-project/">introductory post</a> and have a think about how things went...

<h2>General thoughts</h2>

Overall, I'm really impressed! Having a structure for the project made it <em>much</em> easier to stay motivated. <a href="https://wotidun.wordpress.com/2014/07/16/wot-i-dun-map-projections-project/">Having no idea whatsoever how to do things</a> gets demoralising fast. I'd never used the Angular framework before so I was worried that the tutorials would become impossible to follow... well, it definitely made things harder, and I had to do a bit of extra reading up, but it wasn't a serious problem. I'm pleased that I was able to wire up a complex app myself, and I got to see a lot of new things on the way: communicating with the backend server, the MVC pattern, using an external API like Google Maps.

Obviously I'm going to need a lot more practice with these to really know what I'm doing, but I tend to like the learning approach of having lots of new things thrown at me, getting a rough idea of how things work, and then going back and filling in gaps. That last bit is obviously important: I don't want to become someone who just knows how to paste a bunch of stuff together. I also got plenty of useful general HTML and CSS practice, used Bootstrap a bit more, and <a href="https://wotidun.wordpress.com/2015/04/30/zyring-day-10-callback-tuesday/">got my head round callbacks</a>.

Last but not least, I think it's helped a bit with me getting a job! In August I'm starting a trainee developer position. It's at a local software consultancy which trains up graduates with limited programming experience (but generally some kind of technical background I think... lots of maths students at the interview). They seem to work on a very wide range of projects, so it should be a good opportunity to learn quickly and find out what I like doing. And as an extra plus, I can stay in the Bath/Bristol area, which I really like. I don't have to move to London or Cambridge and tip piles of money into a hole just to afford rent!

I talked about the Zyring project at the interview, and I think that helped counter the interviewer's natural suspicion that as a PhD graduate I wasn't really serious about this career switch. It was good to be able to show I was putting my own time into a coding project and enjoying it rather than applying to jobs at random out of necessity, and I think doing something with an obvious real-world application shows that I'm capable of taking an interest in something less esoteric than neutron star physics.

OK, now for a few specifics:

<h2>Magic beans test</h2>

In my intro post I wrote:

<blockquote>
  At the start of this project, you download a 'project scaffolding' - a rather bewildering number of files and folders, with references to a lot of tools and frameworks - Bower, Grunt, Angular, Bootstrap... Zyring make it very clear that you don't need to know what everything is from the start, which I'm fine with - I'm happy with approaches that throw you in and allow you to learn as you go.
  
  However, there is a <em>lot</em> of this stuff, which worries me. Zyring say that everything will be explained in later tutorials, which is a key claim as far as I'm concerned. I'm not expecting to come out with particularly high-level knowledge of all this stuff, but if I'm poking around the filesystem at the end of the project and half of it still looks like a bunch of magic beans then I will be disappointed.
</blockquote>

So, it's now time to go through the filesystem systematically and see what I think now I'm at the end of the project. This isn't just a silly exercise - if I want to make my own project along these lines, I'm going to have to know how to set it up myself.

I mainly care about the main <code>app</code> folder (which I'll come to in a minute), but let's look at the other bits hanging around in the project folder:

<ul>
<li><code>bower_components</code>. This has the various packages I've downloaded for this app. There are a lot of them:</li>
</ul>

[caption id="attachment_245" align="alignnone" width="262"]<a href="https://wotidun.files.wordpress.com/2015/06/manypackages.png"><img class="size-full wp-image-245" src="https://wotidun.files.wordpress.com/2015/06/manypackages.png" alt="Long list of packages" width="262" height="582" /></a> I forgot to include kitchen-sink.js...[/caption]

There's a bit of rambling about whether that's overkill later in this post. Anyway this passes the magic beans test as I recognise the files inside it.

<ul>
<li><code>node_modules</code>. This pretty much all seems to be to do with <code>grunt</code>, which I still know very little about. On the other hand, this is not the focus of the project.</p></li>
<li><p><code>test</code>. Some tests I know nothing about. Probably a fail on the magic beans front.</p></li>
<li><p>a few other files floating around. <code>bower.json</code> seems to list the app's dependencies on various packages and appears to have been <a href="http://bower.io/docs/creating-packages/">automatically updated</a> as I added more packages. There's also <code>package.json</code> which seems to be the same thing for the Node files. Finally there's <code>gruntfile.js</code>, which <a href="http://gruntjs.com/sample-gruntfile">seems to be some kind of configuration file</a> for <code>grunt</code>.</p></li>
</ul>

<p>OK, now let's look into the <code>app</code> folder. Here we have:

<ul>
<li><code>images</code>: this is pretty self-explanatory, just city images I added myself</li>
<li><code>scripts</code>: my controllers and services go here. Again I made these files myself, no problem here</li>
<li><code>styles</code>: my CSS file. Fine.</li>
<li><code>util</code>: ooh, here's some magic beans! There's <code>humane.min.js</code> which is apparently <a href="http://wavded.github.io/humane-js/">'a simple, modern, framework-independent, well-tested, unobtrusive, notification system.'</a> Then there's <code>libnotify.css</code>, which seems to go along with it. Finally there's <code>socket.io</code>, which <a href="socket.io">'enables real-time bidirectional event-based communication.'</a> Good to know! All this stuff seems to be connected to a baffling script at the bottom of <code>index.html</code> full of <code>notifyToaster</code>s and <code>socket.emit</code>. I think this is something to do with requesting help... so Zyring-specific, not part of the project as such. I probably don't have to care about it.</p></li>
<li><p><code>views</code>: contains my views. Nothing to see here.</p></li>
<li>Finally we have good old <code>404.html</code>, <code>index.html</code> and <code>robots.txt</code>.</li>
</ul>

<p>So overall this isn't too bad. <code>test</code> and <code>utils</code> are full of magic beans but are not really relevant to the project, everything else pretty much makes sense except maybe some of the <code>grunt</code> stuff, which is still recognisable at least. I think this is OK - my main worry was ending up with a completely incomprehensible project I had no hope of reproducing.

<h2>Minor gripes</h2>

Now for a few things I'm unsure about:

<ul>
<li>I've enjoyed learning the basics of Angular, but I'm still unsure whether it's a good choice to be teaching noobs like me. I was already vaguely aware that the next version of Angular was going to be different, but now I know a bit about the framework I can see that the planned changes are <a href="//jaxenter.com/angular-2-0-112094.html">extremely drastic</a>. That syntax looks very different, and wait, <code>$scope</code>s going? Oh, and controllers are going too? Um, so what exactly is staying?</li>
</ul>

From what I've read, though, it seems like front end development in general is currently a chaotic mess of competing frameworks, and Zyring can't really avoid making some kind of controversial choice. <a href="http://www.codecademy.com/learn/learn-angularjs">Codeacademy</a> seem to have gone the Angular route as well, so I assume there's some logic behind it? I'm really not in a position to judge, seeing as I know almost nothing about the other frameworks. From what I've gathered, Backbone and Knockout are less likely to be torn up and reinvented tomorrow, but also they're smaller and have to be supplemented with more stuff? I suppose Angular offers beginners the opportunity to get something working fast? On the other hand, it's not like it's particularly simple and jargon-free. I have no idea really.

<ul>
<li>Look at that image with the list of libraries again - it's huge! And a couple of them seem rather frivolous - do I really need that Masonry library with the clever-clever image positioning? I feel that using this massive range of libraries at the stage I'm at is going to get me into pretty bad habits of copying and pasting loads of cool-looking things together without really thinking about whether I need it. On the other hand, that Angular Bootstrap library had some useful features in it, and I suppose it's good to know what's out there. It's not like I have to use it all in my own projects.</p></li>
<li><p>Some of the tutorials had confusing elements, but I covered those as they came up in the detailed posts.</p></li>
</ul>

<h2>What will I do next?</h2>

<p>Given that I'm going to get all the programming I can eat starting in August, I doubt I'm going to go mad with new projects. Anyway, here's a few ideas:

<ul>
<li>I may do another Zyring project because I enjoyed the first one, but I doubt I'll blog about it. It's definitely been worth doing - the notes are really useful to look back on to remind myself of things - but it does slow me down. The News Reader one looks good to me, as a long-term RSS addict (still mourning Google Reader :().</p></li>
<li><p>It would also be a good idea to try putting together some minimal CRUD apps with Angular, using <a href="http://www.sitepoint.com/creating-crud-app-minutes-angulars-resource/">this tutorial</a> as a guide, to get more of an idea of the basics. Things that appeal: going through the movie app in the tutorial but doing it for books (this year I've started keeping a list of what I read, so I have plenty to go into it); maybe a simple flashcard app for German vocab. I'd have to work out how to make the backend...</p></li>
<li><p>Before all of this, however, my priority is probably a basic website/blog with Jekyll. I currently write these posts in a text file in Markdown, and then copy and paste them into Wordpress, so I think Jekyll would suit me well. It would be a good chance to learn how to use Git properly (used it a bit before, but it was a while ago). Also, free hosting! A static site would still allow me to muck about with visualisations in d3.js if I felt like it.</p></li>
</ul>

<h2>Final thoughts</h2>

<p>Nothing much more to add, just wanted to reiterate that I'm really glad there are companies thinking about this kind of bridge between basic tutorials and working on projects independently. It's a gap that needs filling, and Zyring's doing an excellent job!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>243</wp:post_id>
  <wp:post_date>2015-06-15 19:50:14</wp:post_date>
  <wp:post_date_gmt>2015-06-15 19:50:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>i-dun-it-zyring-project-summary</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="angular"><![CDATA[Angular]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="zyring"><![CDATA[Zyring]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11703003936]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>congratulations</title>
  <link>https://wotidun.wordpress.com/2015/06/15/i-dun-it-zyring-project-summary/congratulations/#main</link>
  <pubDate>Mon, 15 Jun 2015 19:36:04 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/06/congratulations.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[CONGRATULATIONS!!! PARTY TIME!!!]]></excerpt:encoded>
  <wp:post_id>244</wp:post_id>
  <wp:post_date>2015-06-15 19:36:04</wp:post_date>
  <wp:post_date_gmt>2015-06-15 19:36:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>congratulations</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>243</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/06/congratulations.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[The rather low-key end of the project.]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>manypackages</title>
  <link>https://wotidun.wordpress.com/2015/06/15/i-dun-it-zyring-project-summary/manypackages/#main</link>
  <pubDate>Mon, 15 Jun 2015 19:37:51 +0000</pubDate>
  <dc:creator>wotidun</dc:creator>
  <guid isPermaLink="false">http://wotidun.files.wordpress.com/2015/06/manypackages.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[I forgot to include kitchen-sink.js...]]></excerpt:encoded>
  <wp:post_id>245</wp:post_id>
  <wp:post_date>2015-06-15 19:37:51</wp:post_date>
  <wp:post_date_gmt>2015-06-15 19:37:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>manypackages</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>243</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://wotidun.files.wordpress.com/2015/06/manypackages.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Long list of packages]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
